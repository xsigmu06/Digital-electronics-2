
Project_HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  000010d2  00001166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  0080019e  0080019e  00001204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c7  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4e  00000000  00000000  000036a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f8a  00000000  00000000  000042f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  0000527c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000777  00000000  00000000  00005664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9e  00000000  00000000  00005ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006c79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_18>
      4c:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ed       	ldi	r30, 0xD2	; 210
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 39       	cpi	r26, 0x9E	; 158
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	ae e9       	ldi	r26, 0x9E	; 158
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 30       	cpi	r26, 0x07	; 7
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 42 01 	call	0x284	; 0x284 <main>
      9e:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
      a6:	fc 01       	movw	r30, r24
      a8:	40 81       	ld	r20, Z
      aa:	21 e0       	ldi	r18, 0x01	; 1
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
      b0:	22 0f       	add	r18, r18
      b2:	33 1f       	adc	r19, r19
      b4:	6a 95       	dec	r22
      b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
      b8:	24 2b       	or	r18, r20
      ba:	20 83       	st	Z, r18
      bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
      be:	fc 01       	movw	r30, r24
      c0:	80 81       	ld	r24, Z
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
      c8:	22 0f       	add	r18, r18
      ca:	33 1f       	adc	r19, r19
      cc:	6a 95       	dec	r22
      ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
      d0:	20 95       	com	r18
      d2:	82 23       	and	r24, r18
      d4:	80 83       	st	Z, r24
      d6:	80 81       	ld	r24, Z
      d8:	81 81       	ldd	r24, Z+1	; 0x01
      da:	28 23       	and	r18, r24
      dc:	21 83       	std	Z+1, r18	; 0x01
      de:	08 95       	ret

000000e0 <GPIO_write_low>:
      e0:	fc 01       	movw	r30, r24
      e2:	90 81       	ld	r25, Z
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	6a 95       	dec	r22
      f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
      f2:	20 95       	com	r18
      f4:	29 23       	and	r18, r25
      f6:	20 83       	st	Z, r18
      f8:	08 95       	ret

000000fa <GPIO_write_high>:
      fa:	fc 01       	movw	r30, r24
      fc:	40 81       	ld	r20, Z
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
     104:	22 0f       	add	r18, r18
     106:	33 1f       	adc	r19, r19
     108:	6a 95       	dec	r22
     10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
     10c:	24 2b       	or	r18, r20
     10e:	20 83       	st	Z, r18
     110:	08 95       	ret

00000112 <GPIO_toggle>:
     112:	fc 01       	movw	r30, r24
     114:	40 81       	ld	r20, Z
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
     11c:	22 0f       	add	r18, r18
     11e:	33 1f       	adc	r19, r19
     120:	6a 95       	dec	r22
     122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
     124:	24 27       	eor	r18, r20
     126:	20 83       	st	Z, r18
     128:	08 95       	ret

0000012a <GPIO_read>:
     12a:	fc 01       	movw	r30, r24
     12c:	80 81       	ld	r24, Z
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_read+0xc>
     132:	95 95       	asr	r25
     134:	87 95       	ror	r24
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_read+0x8>
     13a:	81 70       	andi	r24, 0x01	; 1
     13c:	08 95       	ret

0000013e <toggle_e>:
     13e:	29 9a       	sbi	0x05, 1	; 5
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <toggle_e+0x4>
     146:	00 00       	nop
     148:	29 98       	cbi	0x05, 1	; 5
     14a:	08 95       	ret

0000014c <lcd_write>:
     14c:	cf 93       	push	r28
     14e:	c8 2f       	mov	r28, r24
     150:	66 23       	and	r22, r22
     152:	11 f0       	breq	.+4      	; 0x158 <lcd_write+0xc>
     154:	28 9a       	sbi	0x05, 0	; 5
     156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_write+0xe>
     158:	28 98       	cbi	0x05, 0	; 5
     15a:	54 9a       	sbi	0x0a, 4	; 10
     15c:	55 9a       	sbi	0x0a, 5	; 10
     15e:	56 9a       	sbi	0x0a, 6	; 10
     160:	57 9a       	sbi	0x0a, 7	; 10
     162:	5f 98       	cbi	0x0b, 7	; 11
     164:	5e 98       	cbi	0x0b, 6	; 11
     166:	5d 98       	cbi	0x0b, 5	; 11
     168:	5c 98       	cbi	0x0b, 4	; 11
     16a:	cc 23       	and	r28, r28
     16c:	0c f4       	brge	.+2      	; 0x170 <lcd_write+0x24>
     16e:	5f 9a       	sbi	0x0b, 7	; 11
     170:	c6 fd       	sbrc	r28, 6
     172:	5e 9a       	sbi	0x0b, 6	; 11
     174:	c5 fd       	sbrc	r28, 5
     176:	5d 9a       	sbi	0x0b, 5	; 11
     178:	c4 fd       	sbrc	r28, 4
     17a:	5c 9a       	sbi	0x0b, 4	; 11
     17c:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     180:	5f 98       	cbi	0x0b, 7	; 11
     182:	5e 98       	cbi	0x0b, 6	; 11
     184:	5d 98       	cbi	0x0b, 5	; 11
     186:	5c 98       	cbi	0x0b, 4	; 11
     188:	c3 fd       	sbrc	r28, 3
     18a:	5f 9a       	sbi	0x0b, 7	; 11
     18c:	c2 fd       	sbrc	r28, 2
     18e:	5e 9a       	sbi	0x0b, 6	; 11
     190:	c1 fd       	sbrc	r28, 1
     192:	5d 9a       	sbi	0x0b, 5	; 11
     194:	c0 fd       	sbrc	r28, 0
     196:	5c 9a       	sbi	0x0b, 4	; 11
     198:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     19c:	5c 9a       	sbi	0x0b, 4	; 11
     19e:	5d 9a       	sbi	0x0b, 5	; 11
     1a0:	5e 9a       	sbi	0x0b, 6	; 11
     1a2:	5f 9a       	sbi	0x0b, 7	; 11
     1a4:	87 eb       	ldi	r24, 0xB7	; 183
     1a6:	9b e0       	ldi	r25, 0x0B	; 11
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_write+0x5c>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_write+0x62>
     1ae:	00 00       	nop
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <lcd_command>:
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
     1ba:	08 95       	ret

000001bc <lcd_gotoxy>:
     1bc:	61 11       	cpse	r22, r1
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <lcd_gotoxy+0xc>
     1c0:	80 58       	subi	r24, 0x80	; 128
     1c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     1c6:	08 95       	ret
     1c8:	80 54       	subi	r24, 0x40	; 64
     1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     1ce:	08 95       	ret

000001d0 <lcd_clrscr>:
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     1d6:	08 95       	ret

000001d8 <lcd_putc>:
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
     1de:	08 95       	ret

000001e0 <lcd_puts>:
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
     1e6:	21 96       	adiw	r28, 0x01	; 1
     1e8:	fc 01       	movw	r30, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 23       	and	r24, r24
     1ee:	29 f0       	breq	.+10     	; 0x1fa <lcd_puts+0x1a>
     1f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
     1f4:	89 91       	ld	r24, Y+
     1f6:	81 11       	cpse	r24, r1
     1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <lcd_puts+0x10>
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <lcd_init>:
     200:	cf 93       	push	r28
     202:	c8 2f       	mov	r28, r24
     204:	20 9a       	sbi	0x04, 0	; 4
     206:	55 9a       	sbi	0x0a, 5	; 10
     208:	21 9a       	sbi	0x04, 1	; 4
     20a:	54 9a       	sbi	0x0a, 4	; 10
     20c:	55 9a       	sbi	0x0a, 5	; 10
     20e:	56 9a       	sbi	0x0a, 6	; 10
     210:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	99 ef       	ldi	r25, 0xF9	; 249
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x16>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x1c>
     21c:	00 00       	nop
     21e:	5d 9a       	sbi	0x0b, 5	; 11
     220:	5c 9a       	sbi	0x0b, 4	; 11
     222:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     226:	8f e1       	ldi	r24, 0x1F	; 31
     228:	9e e4       	ldi	r25, 0x4E	; 78
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x2a>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x30>
     230:	00 00       	nop
     232:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x3a>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x40>
     240:	00 00       	nop
     242:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x4a>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x50>
     250:	00 00       	nop
     252:	5c 98       	cbi	0x0b, 4	; 11
     254:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x5c>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x62>
     262:	00 00       	nop
     264:	88 e2       	ldi	r24, 0x28	; 40
     266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     26a:	88 e0       	ldi	r24, 0x08	; 8
     26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     270:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_clrscr>
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     27a:	8c 2f       	mov	r24, r28
     27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <main>:

/* Function definitions ----------------------------------------------*/
int main(void)
{
    // Output pins (Trigger)
	GPIO_config_output(&DDRB, trigFront);
     284:	62 e0       	ldi	r22, 0x02	; 2
     286:	84 e2       	ldi	r24, 0x24	; 36
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, trigFront);
     28e:	62 e0       	ldi	r22, 0x02	; 2
     290:	85 e2       	ldi	r24, 0x25	; 37
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRB, trigBack);
     298:	64 e0       	ldi	r22, 0x04	; 4
     29a:	84 e2       	ldi	r24, 0x24	; 36
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, trigBack);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	85 e2       	ldi	r24, 0x25	; 37
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	// Input pins (Echo)
	GPIO_config_input_nopull(&DDRB, echoFront);
     2ac:	63 e0       	ldi	r22, 0x03	; 3
     2ae:	84 e2       	ldi	r24, 0x24	; 36
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	GPIO_config_input_nopull(&DDRB, echoBack);
     2b6:	65 e0       	ldi	r22, 0x05	; 5
     2b8:	84 e2       	ldi	r24, 0x24	; 36
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	
	// LEDsfront
	GPIO_config_output(&DDRC,LED1);
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	87 e2       	ldi	r24, 0x27	; 39
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED1);
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	88 e2       	ldi	r24, 0x28	; 40
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED2);
     2d4:	62 e0       	ldi	r22, 0x02	; 2
     2d6:	87 e2       	ldi	r24, 0x27	; 39
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED2);
     2de:	62 e0       	ldi	r22, 0x02	; 2
     2e0:	88 e2       	ldi	r24, 0x28	; 40
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED3);
     2e8:	63 e0       	ldi	r22, 0x03	; 3
     2ea:	87 e2       	ldi	r24, 0x27	; 39
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED3);
     2f2:	63 e0       	ldi	r22, 0x03	; 3
     2f4:	88 e2       	ldi	r24, 0x28	; 40
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRC,LED4);
     2fc:	64 e0       	ldi	r22, 0x04	; 4
     2fe:	87 e2       	ldi	r24, 0x27	; 39
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC,LED4);
     306:	64 e0       	ldi	r22, 0x04	; 4
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	// LEDsback
	GPIO_config_output(&DDRD,LED5);
     310:	63 e0       	ldi	r22, 0x03	; 3
     312:	8a e2       	ldi	r24, 0x2A	; 42
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD,LED5);
     31a:	63 e0       	ldi	r22, 0x03	; 3
     31c:	8b e2       	ldi	r24, 0x2B	; 43
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRD,LED6);
     324:	62 e0       	ldi	r22, 0x02	; 2
     326:	8a e2       	ldi	r24, 0x2A	; 42
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD,LED6);	
     32e:	62 e0       	ldi	r22, 0x02	; 2
     330:	8b e2       	ldi	r24, 0x2B	; 43
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRD,LED7);
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	8a e2       	ldi	r24, 0x2A	; 42
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD,LED7);
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	8b e2       	ldi	r24, 0x2B	; 43
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRD,LED8);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	8a e2       	ldi	r24, 0x2A	; 42
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD,LED8); 
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	8b e2       	ldi	r24, 0x2B	; 43
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	 
     // speaker
    GPIO_config_output(&DDRC, speaker);
     360:	65 e0       	ldi	r22, 0x05	; 5
     362:	87 e2       	ldi	r24, 0x27	; 39
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC, speaker);
     36a:	65 e0       	ldi	r22, 0x05	; 5
     36c:	88 e2       	ldi	r24, 0x28	; 40
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
     374:	8c e0       	ldi	r24, 0x0C	; 12
     376:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
    lcd_gotoxy(0, 0);
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("Front: Standby..");
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
    lcd_gotoxy(0, 1);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts(" Back: Standby..");
     392:	87 e1       	ldi	r24, 0x17	; 23
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
     39a:	87 e6       	ldi	r24, 0x67	; 103
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 96 06 	call	0xd2c	; 0xd2c <uart_init>
    uart_puts("Welcome.\n\n");
     3a2:	88 e2       	ldi	r24, 0x28	; 40
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
    //uart_puts("Please, fasten your seatbelt.\n\n");

    // Configure 8-bit Timer/Counter0
    // Enable interrupt and set the overflow prescaler to 16 us
    // Used for measuring and calculating distance
    TIM0_overflow_16us();
     3aa:	85 b5       	in	r24, 0x25	; 37
     3ac:	89 7f       	andi	r24, 0xF9	; 249
     3ae:	85 bd       	out	0x25, r24	; 37
     3b0:	85 b5       	in	r24, 0x25	; 37
     3b2:	81 60       	ori	r24, 0x01	; 1
     3b4:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
     3b6:	ee e6       	ldi	r30, 0x6E	; 110
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	81 60       	ori	r24, 0x01	; 1
     3be:	80 83       	st	Z, r24


    // Configure 16-bit Timer/Counter1
    // Enable interrupt and set the overflow prescaler to 262 ms
    // Used for displaying result on LCD, uart, LEDs
    TIM1_overflow_262ms();
     3c0:	e1 e8       	ldi	r30, 0x81	; 129
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8b 7f       	andi	r24, 0xFB	; 251
     3c8:	80 83       	st	Z, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	83 60       	ori	r24, 0x03	; 3
     3ce:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();      
     3d0:	ef e6       	ldi	r30, 0x6F	; 111
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
     3da:	78 94       	sei
     3dc:	ff cf       	rjmp	.-2      	; 0x3dc <main+0x158>

000003de <__vector_16>:
 * ISR starts when Timer/Counter0 overflows. 
 * 
 */
//ISR(TIMER0_OVF_vect)
ISR(TIMER0_OVF_vect)
{
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	2f 93       	push	r18
     3ea:	3f 93       	push	r19
     3ec:	4f 93       	push	r20
     3ee:	5f 93       	push	r21
     3f0:	6f 93       	push	r22
     3f2:	7f 93       	push	r23
     3f4:	8f 93       	push	r24
     3f6:	9f 93       	push	r25
     3f8:	af 93       	push	r26
     3fa:	bf 93       	push	r27
     3fc:	ef 93       	push	r30
     3fe:	ff 93       	push	r31
    static uint16_t number_of_overflows = 0;
    static uint16_t lenFront = 0;
    static uint16_t lenBack = 0;
    static state_t state= STATE_TRIG;
    
    number_of_overflows++;
     400:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <number_of_overflows.2259>
     404:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <number_of_overflows.2259+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <number_of_overflows.2259+0x1>
     40e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <number_of_overflows.2259>
    
    switch(state)
     412:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <state.2262>
     416:	22 23       	and	r18, r18
     418:	19 f0       	breq	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41a:	21 30       	cpi	r18, 0x01	; 1
     41c:	e9 f0       	breq	.+58     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     41e:	88 c0       	rjmp	.+272    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
    {
        case STATE_TRIG:            
            GPIO_write_high(&PORTB, trigFront);
     420:	62 e0       	ldi	r22, 0x02	; 2
     422:	85 e2       	ldi	r24, 0x25	; 37
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, trigBack);
     42a:	64 e0       	ldi	r22, 0x04	; 4
     42c:	85 e2       	ldi	r24, 0x25	; 37
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
     434:	25 e3       	ldi	r18, 0x35	; 53
     436:	2a 95       	dec	r18
     438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43a:	00 00       	nop
            _delay_us(10);
            GPIO_write_low(&PORTB, trigFront);
     43c:	62 e0       	ldi	r22, 0x02	; 2
     43e:	85 e2       	ldi	r24, 0x25	; 37
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, trigBack);
     446:	64 e0       	ldi	r22, 0x04	; 4
     448:	85 e2       	ldi	r24, 0x25	; 37
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            
            state = STATE_ECHO_MEAS;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state.2262>

            break;
     456:	6e c0       	rjmp	.+220    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
        
        case STATE_ECHO_MEAS:
            if (number_of_overflows <= 65000)  // 60 ms
     458:	89 3e       	cpi	r24, 0xE9	; 233
     45a:	9d 4f       	sbci	r25, 0xFD	; 253
     45c:	10 f5       	brcc	.+68     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
            {
                if (GPIO_read(&PINB, echoFront))
     45e:	63 e0       	ldi	r22, 0x03	; 3
     460:	83 e2       	ldi	r24, 0x23	; 35
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
     468:	88 23       	and	r24, r24
     46a:	49 f0       	breq	.+18     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
                {
                    lenFront++;
     46c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <lenFront.2260>
     470:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <lenFront.2260+0x1>
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <lenFront.2260+0x1>
     47a:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <lenFront.2260>
                }
                if (GPIO_read(&PINB, echoBack))
     47e:	65 e0       	ldi	r22, 0x05	; 5
     480:	83 e2       	ldi	r24, 0x23	; 35
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
     488:	88 23       	and	r24, r24
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	53 c0       	rjmp	.+166    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
                {
                    lenBack++;
     48e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <lenBack.2261>
     492:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <lenBack.2261+0x1>
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <lenBack.2261+0x1>
     49c:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <lenBack.2261>
     4a0:	49 c0       	rjmp	.+146    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
                }
            }
            else
            {
                number_of_overflows = 0;
     4a2:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <number_of_overflows.2259+0x1>
     4a6:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <number_of_overflows.2259>
                distFront = (float)lenFront * 0.017 * 16.0; // 16 us
     4aa:	60 91 af 01 	lds	r22, 0x01AF	; 0x8001af <lenFront.2260>
     4ae:	70 91 b0 01 	lds	r23, 0x01B0	; 0x8001b0 <lenFront.2260+0x1>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__floatunsisf>
     4ba:	26 e9       	ldi	r18, 0x96	; 150
     4bc:	33 e4       	ldi	r19, 0x43	; 67
     4be:	4b e8       	ldi	r20, 0x8B	; 139
     4c0:	5c e3       	ldi	r21, 0x3C	; 60
     4c2:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__mulsf3>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e8       	ldi	r20, 0x80	; 128
     4cc:	51 e4       	ldi	r21, 0x41	; 65
     4ce:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__mulsf3>
     4d2:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <distFront>
     4d6:	70 93 ba 01 	sts	0x01BA, r23	; 0x8001ba <distFront+0x1>
     4da:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <distFront+0x2>
     4de:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <distFront+0x3>
                distBack = (float)lenBack * 0.017 * 16.0;
     4e2:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <lenBack.2261>
     4e6:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <lenBack.2261+0x1>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__floatunsisf>
     4f2:	26 e9       	ldi	r18, 0x96	; 150
     4f4:	33 e4       	ldi	r19, 0x43	; 67
     4f6:	4b e8       	ldi	r20, 0x8B	; 139
     4f8:	5c e3       	ldi	r21, 0x3C	; 60
     4fa:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__mulsf3>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e8       	ldi	r20, 0x80	; 128
     504:	51 e4       	ldi	r21, 0x41	; 65
     506:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__mulsf3>
     50a:	60 93 b5 01 	sts	0x01B5, r22	; 0x8001b5 <distBack>
     50e:	70 93 b6 01 	sts	0x01B6, r23	; 0x8001b6 <distBack+0x1>
     512:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <distBack+0x2>
     516:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <distBack+0x3>
                lenFront = 0;
     51a:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <lenFront.2260+0x1>
     51e:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <lenFront.2260>
                lenBack = 0;
     522:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <lenBack.2261+0x1>
     526:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <lenBack.2261>
                state = STATE_TRIG;
     52a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <state.2262>
     52e:	02 c0       	rjmp	.+4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
            } 
            
            break;   
            
        default:
            state=STATE_TRIG;        
     530:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <state.2262>
    }
}
     534:	ff 91       	pop	r31
     536:	ef 91       	pop	r30
     538:	bf 91       	pop	r27
     53a:	af 91       	pop	r26
     53c:	9f 91       	pop	r25
     53e:	8f 91       	pop	r24
     540:	7f 91       	pop	r23
     542:	6f 91       	pop	r22
     544:	5f 91       	pop	r21
     546:	4f 91       	pop	r20
     548:	3f 91       	pop	r19
     54a:	2f 91       	pop	r18
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <__vector_9>:
	
	
}

ISR(TIMER2_OVF_vect)
{
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
    //GPIO_toggle(&PORTC, speaker);
    static uint8_t counter = 0;
    counter++;
     578:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <counter.2278>
     57c:	8f 5f       	subi	r24, 0xFF	; 255
     57e:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <counter.2278>

    GPIO_toggle(&PORTC, speaker);
     582:	65 e0       	ldi	r22, 0x05	; 5
     584:	88 e2       	ldi	r24, 0x28	; 40
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>

    if(counter >= TIM2_off)
     58c:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <counter.2278>
     590:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <TIM2_off>
     594:	98 17       	cp	r25, r24
     596:	38 f0       	brcs	.+14     	; 0x5a6 <__vector_9+0x50>
    {
        TIM2_overflow_interrupt_disable();
     598:	e0 e7       	ldi	r30, 0x70	; 112
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	8e 7f       	andi	r24, 0xFE	; 254
     5a0:	80 83       	st	Z, r24
        counter = 0;
     5a2:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <counter.2278>
    }
}
     5a6:	ff 91       	pop	r31
     5a8:	ef 91       	pop	r30
     5aa:	bf 91       	pop	r27
     5ac:	af 91       	pop	r26
     5ae:	9f 91       	pop	r25
     5b0:	8f 91       	pop	r24
     5b2:	7f 91       	pop	r23
     5b4:	6f 91       	pop	r22
     5b6:	5f 91       	pop	r21
     5b8:	4f 91       	pop	r20
     5ba:	3f 91       	pop	r19
     5bc:	2f 91       	pop	r18
     5be:	0f 90       	pop	r0
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	0f 90       	pop	r0
     5c4:	1f 90       	pop	r1
     5c6:	18 95       	reti

000005c8 <lcd_clear>:

// clears LCD
void lcd_clear(uint8_t pos)
{
    lcd_gotoxy(7, pos);
     5c8:	68 2f       	mov	r22, r24
     5ca:	87 e0       	ldi	r24, 0x07	; 7
     5cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("                ");   // clear all 16 symbols in a row
     5d0:	83 e3       	ldi	r24, 0x33	; 51
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
     5d8:	08 95       	ret

000005da <displayResult>:
}

// displays result on LCD, uart
void displayResult(volatile float DistanceFront, volatile float DistanceBack)
{    
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	2d 97       	sbiw	r28, 0x0d	; 13
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	6e 83       	std	Y+6, r22	; 0x06
     5fa:	7f 83       	std	Y+7, r23	; 0x07
     5fc:	88 87       	std	Y+8, r24	; 0x08
     5fe:	99 87       	std	Y+9, r25	; 0x09
     600:	2a 87       	std	Y+10, r18	; 0x0a
     602:	3b 87       	std	Y+11, r19	; 0x0b
     604:	4c 87       	std	Y+12, r20	; 0x0c
     606:	5d 87       	std	Y+13, r21	; 0x0d
    static float dist = 0.0, diffFront = 0.0, diffBack = 0.0;
    uint8_t pos = 0;
    char side[5]= "Front"; 
     608:	85 e0       	ldi	r24, 0x05	; 5
     60a:	e0 e0       	ldi	r30, 0x00	; 0
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	de 01       	movw	r26, r28
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <displayResult+0x38>
    bool changed = false;  
    
    // if one distance changed
     if (diffFront != DistanceFront)
     61a:	2e 81       	ldd	r18, Y+6	; 0x06
     61c:	3f 81       	ldd	r19, Y+7	; 0x07
     61e:	48 85       	ldd	r20, Y+8	; 0x08
     620:	59 85       	ldd	r21, Y+9	; 0x09
     622:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <diffFront.2287>
     626:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <diffFront.2287+0x1>
     62a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <diffFront.2287+0x2>
     62e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <diffFront.2287+0x3>
     632:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     636:	88 23       	and	r24, r24
     638:	09 f4       	brne	.+2      	; 0x63c <displayResult+0x62>
     63a:	f4 c0       	rjmp	.+488    	; 0x824 <displayResult+0x24a>
    {	
        pos = 0;
        diffFront = DistanceFront;
     63c:	8e 81       	ldd	r24, Y+6	; 0x06
     63e:	9f 81       	ldd	r25, Y+7	; 0x07
     640:	a8 85       	ldd	r26, Y+8	; 0x08
     642:	b9 85       	ldd	r27, Y+9	; 0x09
     644:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <diffFront.2287>
     648:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <diffFront.2287+0x1>
     64c:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <diffFront.2287+0x2>
     650:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <diffFront.2287+0x3>
        dist = DistanceFront;
     654:	8e 81       	ldd	r24, Y+6	; 0x06
     656:	9f 81       	ldd	r25, Y+7	; 0x07
     658:	a8 85       	ldd	r26, Y+8	; 0x08
     65a:	b9 85       	ldd	r27, Y+9	; 0x09
     65c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <dist.2286>
     660:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <dist.2286+0x1>
     664:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <dist.2286+0x2>
     668:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <dist.2286+0x3>
        strcpy(side, "Front");  // for assigning to array type
     66c:	86 e0       	ldi	r24, 0x06	; 6
     66e:	e0 e0       	ldi	r30, 0x00	; 0
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	de 01       	movw	r26, r28
     674:	11 96       	adiw	r26, 0x01	; 1
     676:	01 90       	ld	r0, Z+
     678:	0d 92       	st	X+, r0
     67a:	8a 95       	dec	r24
     67c:	e1 f7       	brne	.-8      	; 0x676 <displayResult+0x9c>
        changed = true;
    }
    if (diffBack != DistanceBack)
     67e:	2a 85       	ldd	r18, Y+10	; 0x0a
     680:	3b 85       	ldd	r19, Y+11	; 0x0b
     682:	4c 85       	ldd	r20, Y+12	; 0x0c
     684:	5d 85       	ldd	r21, Y+13	; 0x0d
     686:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end>
     68a:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x1>
     68e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0x2>
     692:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x3>
     696:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	19 f1       	breq	.+70     	; 0x6e4 <displayResult+0x10a>
    {  
        pos = 1;
        diffBack = DistanceBack;
     69e:	8a 85       	ldd	r24, Y+10	; 0x0a
     6a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     6a2:	ac 85       	ldd	r26, Y+12	; 0x0c
     6a4:	bd 85       	ldd	r27, Y+13	; 0x0d
     6a6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <__data_end>
     6aa:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <__data_end+0x1>
     6ae:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <__data_end+0x2>
     6b2:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <__data_end+0x3>
        dist = DistanceBack;
     6b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     6b8:	9b 85       	ldd	r25, Y+11	; 0x0b
     6ba:	ac 85       	ldd	r26, Y+12	; 0x0c
     6bc:	bd 85       	ldd	r27, Y+13	; 0x0d
     6be:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <dist.2286>
     6c2:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <dist.2286+0x1>
     6c6:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <dist.2286+0x2>
     6ca:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <dist.2286+0x3>
        strcpy(side, "Back");
     6ce:	85 e0       	ldi	r24, 0x05	; 5
     6d0:	e8 e9       	ldi	r30, 0x98	; 152
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	de 01       	movw	r26, r28
     6d6:	11 96       	adiw	r26, 0x01	; 1
     6d8:	01 90       	ld	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	8a 95       	dec	r24
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <displayResult+0xfe>
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
    {  
        pos = 1;
     6e0:	11 e0       	ldi	r17, 0x01	; 1
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <displayResult+0x10c>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
     6e4:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6e6:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <dist.2286>
     6ea:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <dist.2286+0x1>
     6ee:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <dist.2286+0x2>
     6f2:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <dist.2286+0x3>
     6f6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fixsfsi>
     6fa:	dc 01       	movw	r26, r24
     6fc:	cb 01       	movw	r24, r22
     6fe:	4a e0       	ldi	r20, 0x0A	; 10
     700:	62 e0       	ldi	r22, 0x02	; 2
     702:	72 e0       	ldi	r23, 0x02	; 2
     704:	0e 94 32 08 	call	0x1064	; 0x1064 <__itoa_ncheck>
        itoa(dist, lcd_string, 10);
        //sprintf(lcd_string, "%0.2f", dist);
        
    
	    // Write result on LCD screen
	    if(dist < 2)  // Distance smaller than minimum possible
     708:	c0 90 a2 01 	lds	r12, 0x01A2	; 0x8001a2 <dist.2286>
     70c:	d0 90 a3 01 	lds	r13, 0x01A3	; 0x8001a3 <dist.2286+0x1>
     710:	e0 90 a4 01 	lds	r14, 0x01A4	; 0x8001a4 <dist.2286+0x2>
     714:	f0 90 a5 01 	lds	r15, 0x01A5	; 0x8001a5 <dist.2286+0x3>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	50 e4       	ldi	r21, 0x40	; 64
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     728:	88 23       	and	r24, r24
     72a:	c4 f4       	brge	.+48     	; 0x75c <displayResult+0x182>
	    {
		    lcd_clear(pos);
     72c:	81 2f       	mov	r24, r17
     72e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
		    lcd_gotoxy(7, pos);                                   
     732:	61 2f       	mov	r22, r17
     734:	87 e0       	ldi	r24, 0x07	; 7
     736:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts("<2 cm");
     73a:	84 e4       	ldi	r24, 0x44	; 68
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
		    uart_puts(" object too close.");
     74a:	8a e4       	ldi	r24, 0x4A	; 74
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
		    uart_puts("\n");   
     752:	81 e3       	ldi	r24, 0x31	; 49
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
     75a:	74 c0       	rjmp	.+232    	; 0x844 <displayResult+0x26a>
	    }
	    else if(dist <= 400)
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	48 ec       	ldi	r20, 0xC8	; 200
     762:	53 e4       	ldi	r21, 0x43	; 67
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     76c:	18 16       	cp	r1, r24
     76e:	24 f1       	brlt	.+72     	; 0x7b8 <displayResult+0x1de>
	    {
		    lcd_clear(pos);
     770:	81 2f       	mov	r24, r17
     772:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
		    lcd_gotoxy(8, pos);		    
     776:	61 2f       	mov	r22, r17
     778:	88 e0       	ldi	r24, 0x08	; 8
     77a:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(lcd_string);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
            lcd_puts("  cm");                       
     786:	8d e5       	ldi	r24, 0x5D	; 93
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
     78e:	ce 01       	movw	r24, r28
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
		    uart_puts(" distance: ");
     796:	82 e6       	ldi	r24, 0x62	; 98
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
		    uart_puts(lcd_string);
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	92 e0       	ldi	r25, 0x02	; 2
     7a2:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
            uart_puts("  cm");
     7a6:	8d e5       	ldi	r24, 0x5D	; 93
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
		    uart_puts("\n");    
     7ae:	81 e3       	ldi	r24, 0x31	; 49
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
     7b6:	46 c0       	rjmp	.+140    	; 0x844 <displayResult+0x26a>
	    }
	    else if(dist > 400)   // Distance greater than maximum possible
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	48 ec       	ldi	r20, 0xC8	; 200
     7be:	53 e4       	ldi	r21, 0x43	; 67
     7c0:	c7 01       	movw	r24, r14
     7c2:	b6 01       	movw	r22, r12
     7c4:	0e 94 98 07 	call	0xf30	; 0xf30 <__gesf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	c4 f4       	brge	.+48     	; 0x7fc <displayResult+0x222>
	    {
		    lcd_clear(pos);
     7cc:	81 2f       	mov	r24, r17
     7ce:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
		    lcd_gotoxy(7, pos);
     7d2:	61 2f       	mov	r22, r17
     7d4:	87 e0       	ldi	r24, 0x07	; 7
     7d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(">400 cm");
     7da:	8e e6       	ldi	r24, 0x6E	; 110
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
					    
            uart_puts(side);
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
		    uart_puts(" object too far.");     
     7ea:	86 e7       	ldi	r24, 0x76	; 118
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
		    uart_puts("\n"); 
     7f2:	81 e3       	ldi	r24, 0x31	; 49
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
     7fa:	24 c0       	rjmp	.+72     	; 0x844 <displayResult+0x26a>
	    }
	    else
	    {
		    lcd_clear(pos);
     7fc:	81 2f       	mov	r24, r17
     7fe:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
		    lcd_gotoxy(0, pos);
     802:	61 2f       	mov	r22, r17
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts("Somethings wrong");
     80a:	87 e8       	ldi	r24, 0x87	; 135
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
					    
		    uart_puts("Somethings wrong");
     812:	87 e8       	ldi	r24, 0x87	; 135
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
		    uart_puts("\n"); 
     81a:	81 e3       	ldi	r24, 0x31	; 49
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 c4 06 	call	0xd88	; 0xd88 <uart_puts>
	    }          
    }             
}
     822:	10 c0       	rjmp	.+32     	; 0x844 <displayResult+0x26a>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
     824:	2a 85       	ldd	r18, Y+10	; 0x0a
     826:	3b 85       	ldd	r19, Y+11	; 0x0b
     828:	4c 85       	ldd	r20, Y+12	; 0x0c
     82a:	5d 85       	ldd	r21, Y+13	; 0x0d
     82c:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end>
     830:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x1>
     834:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end+0x2>
     838:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x3>
     83c:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     840:	81 11       	cpse	r24, r1
     842:	2d cf       	rjmp	.-422    	; 0x69e <displayResult+0xc4>
					    
		    uart_puts("Somethings wrong");
		    uart_puts("\n"); 
	    }          
    }             
}
     844:	2d 96       	adiw	r28, 0x0d	; 13
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows.
 * 
 */
ISR(TIMER1_OVF_vect)
{
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1
     86a:	2f 93       	push	r18
     86c:	3f 93       	push	r19
     86e:	4f 93       	push	r20
     870:	5f 93       	push	r21
     872:	6f 93       	push	r22
     874:	7f 93       	push	r23
     876:	8f 93       	push	r24
     878:	9f 93       	push	r25
     87a:	af 93       	push	r26
     87c:	bf 93       	push	r27
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
    TIM2_overflow_4ms();
     882:	e1 eb       	ldi	r30, 0xB1	; 177
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	8e 7f       	andi	r24, 0xFE	; 254
     88a:	80 83       	st	Z, r24
     88c:	80 81       	ld	r24, Z
     88e:	86 60       	ori	r24, 0x06	; 6
     890:	80 83       	st	Z, r24
    static uint16_t smallerDist = 0;
    
    // Display on LCD, uart
    displayResult(distFront, distBack);
     892:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <distBack>
     896:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <distBack+0x1>
     89a:	40 91 b7 01 	lds	r20, 0x01B7	; 0x8001b7 <distBack+0x2>
     89e:	50 91 b8 01 	lds	r21, 0x01B8	; 0x8001b8 <distBack+0x3>
     8a2:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
     8a6:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
     8aa:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
     8ae:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
     8b2:	0e 94 ed 02 	call	0x5da	; 0x5da <displayResult>
    
    if(distFront < distBack)
     8b6:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
     8ba:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
     8be:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
     8c2:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
     8c6:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <distBack>
     8ca:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <distBack+0x1>
     8ce:	40 91 b7 01 	lds	r20, 0x01B7	; 0x8001b7 <distBack+0x2>
     8d2:	50 91 b8 01 	lds	r21, 0x01B8	; 0x8001b8 <distBack+0x3>
     8d6:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     8da:	88 23       	and	r24, r24
     8dc:	7c f4       	brge	.+30     	; 0x8fc <__vector_13+0x9c>
    {
        smallerDist = distFront;
     8de:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
     8e2:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
     8e6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
     8ea:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
     8ee:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fixunssfsi>
     8f2:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <smallerDist.2272+0x1>
     8f6:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <smallerDist.2272>
     8fa:	0e c0       	rjmp	.+28     	; 0x918 <__stack+0x19>
    }
    else
    {
        smallerDist = distBack;
     8fc:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <distBack>
     900:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <distBack+0x1>
     904:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <distBack+0x2>
     908:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <distBack+0x3>
     90c:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fixunssfsi>
     910:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <smallerDist.2272+0x1>
     914:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <smallerDist.2272>
    
	
	
	// change frequency of speaker tone with TIM2 prescaler
	// change frequency of disabling TIM2
	if(smallerDist <= 15)
     918:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <smallerDist.2272>
     91c:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <smallerDist.2272+0x1>
     920:	80 31       	cpi	r24, 0x10	; 16
     922:	91 05       	cpc	r25, r1
     924:	88 f4       	brcc	.+34     	; 0x948 <__stack+0x49>
	{	
		TIM2_off = 200;
     926:	88 ec       	ldi	r24, 0xC8	; 200
     928:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TIM2_off>
		TIM2_overflow_2ms();
     92c:	e1 eb       	ldi	r30, 0xB1	; 177
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	8d 7f       	andi	r24, 0xFD	; 253
     934:	80 83       	st	Z, r24
     936:	80 81       	ld	r24, Z
     938:	85 60       	ori	r24, 0x05	; 5
     93a:	80 83       	st	Z, r24
		TIM2_overflow_interrupt_enable();
     93c:	e0 e7       	ldi	r30, 0x70	; 112
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	81 60       	ori	r24, 0x01	; 1
     944:	80 83       	st	Z, r24
     946:	39 c0       	rjmp	.+114    	; 0x9ba <__stack+0xbb>
	}
	else if(smallerDist <= 50)
     948:	83 33       	cpi	r24, 0x33	; 51
     94a:	91 05       	cpc	r25, r1
     94c:	88 f4       	brcc	.+34     	; 0x970 <__stack+0x71>
	{		
		TIM2_off = 50;
     94e:	82 e3       	ldi	r24, 0x32	; 50
     950:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TIM2_off>
		TIM2_overflow_4ms();
     954:	e1 eb       	ldi	r30, 0xB1	; 177
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	80 81       	ld	r24, Z
     95a:	8e 7f       	andi	r24, 0xFE	; 254
     95c:	80 83       	st	Z, r24
     95e:	80 81       	ld	r24, Z
     960:	86 60       	ori	r24, 0x06	; 6
     962:	80 83       	st	Z, r24
		TIM2_overflow_interrupt_enable();
     964:	e0 e7       	ldi	r30, 0x70	; 112
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	81 60       	ori	r24, 0x01	; 1
     96c:	80 83       	st	Z, r24
     96e:	25 c0       	rjmp	.+74     	; 0x9ba <__stack+0xbb>
	}
	else if(smallerDist <= 100)
     970:	85 36       	cpi	r24, 0x65	; 101
     972:	91 05       	cpc	r25, r1
     974:	88 f4       	brcc	.+34     	; 0x998 <__stack+0x99>
	{
		TIM2_off = 10;
     976:	8a e0       	ldi	r24, 0x0A	; 10
     978:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TIM2_off>
		TIM2_overflow_4ms();
     97c:	e1 eb       	ldi	r30, 0xB1	; 177
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	8e 7f       	andi	r24, 0xFE	; 254
     984:	80 83       	st	Z, r24
     986:	80 81       	ld	r24, Z
     988:	86 60       	ori	r24, 0x06	; 6
     98a:	80 83       	st	Z, r24
		TIM2_overflow_interrupt_enable();
     98c:	e0 e7       	ldi	r30, 0x70	; 112
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	81 60       	ori	r24, 0x01	; 1
     994:	80 83       	st	Z, r24
     996:	11 c0       	rjmp	.+34     	; 0x9ba <__stack+0xbb>
	}
	else if(smallerDist <= 125)
     998:	8e 37       	cpi	r24, 0x7E	; 126
     99a:	91 05       	cpc	r25, r1
     99c:	48 f4       	brcc	.+18     	; 0x9b0 <__stack+0xb1>
	{		
		TIM2_off = 5;
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TIM2_off>
		TIM2_overflow_interrupt_enable();
     9a4:	e0 e7       	ldi	r30, 0x70	; 112
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	80 83       	st	Z, r24
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <__stack+0xbb>
	}
	else
	{		
		TIM2_overflow_interrupt_disable();
     9b0:	e0 e7       	ldi	r30, 0x70	; 112
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	8e 7f       	andi	r24, 0xFE	; 254
     9b8:	80 83       	st	Z, r24
	}
	
	// Display on LEDs, Front

	if(distFront <= 15)
     9ba:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
     9be:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
     9c2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
     9c6:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e7       	ldi	r20, 0x70	; 112
     9d0:	51 e4       	ldi	r21, 0x41	; 65
     9d2:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     9d6:	18 16       	cp	r1, r24
     9d8:	ac f0       	brlt	.+42     	; 0xa04 <__stack+0x105>
	{
		GPIO_write_high(&PORTC, LED1);
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	88 e2       	ldi	r24, 0x28	; 40
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
     9e4:	62 e0       	ldi	r22, 0x02	; 2
     9e6:	88 e2       	ldi	r24, 0x28	; 40
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED3);
     9ee:	63 e0       	ldi	r22, 0x03	; 3
     9f0:	88 e2       	ldi	r24, 0x28	; 40
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED4);
     9f8:	64 e0       	ldi	r22, 0x04	; 4
     9fa:	88 e2       	ldi	r24, 0x28	; 40
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
     a02:	83 c0       	rjmp	.+262    	; 0xb0a <__stack+0x20b>
	}
	else if(distFront <= 50)
     a04:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
     a08:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
     a0c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
     a10:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	48 e4       	ldi	r20, 0x48	; 72
     a1a:	52 e4       	ldi	r21, 0x42	; 66
     a1c:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     a20:	18 16       	cp	r1, r24
     a22:	ac f0       	brlt	.+42     	; 0xa4e <__stack+0x14f>
	{
		GPIO_write_high(&PORTC, LED1);
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	88 e2       	ldi	r24, 0x28	; 40
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
     a2e:	62 e0       	ldi	r22, 0x02	; 2
     a30:	88 e2       	ldi	r24, 0x28	; 40
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED3);
     a38:	63 e0       	ldi	r22, 0x03	; 3
     a3a:	88 e2       	ldi	r24, 0x28	; 40
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED4);
     a42:	64 e0       	ldi	r22, 0x04	; 4
     a44:	88 e2       	ldi	r24, 0x28	; 40
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     a4c:	5e c0       	rjmp	.+188    	; 0xb0a <__stack+0x20b>

	}
	else if(distFront <= 100)
     a4e:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
     a52:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
     a56:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
     a5a:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	48 ec       	ldi	r20, 0xC8	; 200
     a64:	52 e4       	ldi	r21, 0x42	; 66
     a66:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     a6a:	18 16       	cp	r1, r24
     a6c:	ac f0       	brlt	.+42     	; 0xa98 <__stack+0x199>
	{
		GPIO_write_high(&PORTC, LED1);
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	88 e2       	ldi	r24, 0x28	; 40
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, LED2);
     a78:	62 e0       	ldi	r22, 0x02	; 2
     a7a:	88 e2       	ldi	r24, 0x28	; 40
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED3);
     a82:	63 e0       	ldi	r22, 0x03	; 3
     a84:	88 e2       	ldi	r24, 0x28	; 40
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
     a8c:	64 e0       	ldi	r22, 0x04	; 4
     a8e:	88 e2       	ldi	r24, 0x28	; 40
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     a96:	39 c0       	rjmp	.+114    	; 0xb0a <__stack+0x20b>
	}
	else if(distFront <= 125)
     a98:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <distFront>
     a9c:	70 91 ba 01 	lds	r23, 0x01BA	; 0x8001ba <distFront+0x1>
     aa0:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <distFront+0x2>
     aa4:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <distFront+0x3>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	4a ef       	ldi	r20, 0xFA	; 250
     aae:	52 e4       	ldi	r21, 0x42	; 66
     ab0:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     ab4:	18 16       	cp	r1, r24
     ab6:	ac f0       	brlt	.+42     	; 0xae2 <__stack+0x1e3>
	{
		GPIO_write_high(&PORTC, LED1);
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	88 e2       	ldi	r24, 0x28	; 40
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, LED2);
     ac2:	62 e0       	ldi	r22, 0x02	; 2
     ac4:	88 e2       	ldi	r24, 0x28	; 40
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED3);
     acc:	63 e0       	ldi	r22, 0x03	; 3
     ace:	88 e2       	ldi	r24, 0x28	; 40
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
     ad6:	64 e0       	ldi	r22, 0x04	; 4
     ad8:	88 e2       	ldi	r24, 0x28	; 40
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     ae0:	14 c0       	rjmp	.+40     	; 0xb0a <__stack+0x20b>
	}
	else
	{
		GPIO_write_low(&PORTC, LED1);
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	88 e2       	ldi	r24, 0x28	; 40
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED2);
     aec:	62 e0       	ldi	r22, 0x02	; 2
     aee:	88 e2       	ldi	r24, 0x28	; 40
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED3);
     af6:	63 e0       	ldi	r22, 0x03	; 3
     af8:	88 e2       	ldi	r24, 0x28	; 40
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, LED4);
     b00:	64 e0       	ldi	r22, 0x04	; 4
     b02:	88 e2       	ldi	r24, 0x28	; 40
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	}
		       
    // Display on LEDs, Back 

	if(distBack <= 15)
     b0a:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <distBack>
     b0e:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <distBack+0x1>
     b12:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <distBack+0x2>
     b16:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <distBack+0x3>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e7       	ldi	r20, 0x70	; 112
     b20:	51 e4       	ldi	r21, 0x41	; 65
     b22:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     b26:	18 16       	cp	r1, r24
     b28:	ac f0       	brlt	.+42     	; 0xb54 <__stack+0x255>
    {
        GPIO_write_high(&PORTD, LED5);
     b2a:	63 e0       	ldi	r22, 0x03	; 3
     b2c:	8b e2       	ldi	r24, 0x2B	; 43
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, LED6);
     b34:	62 e0       	ldi	r22, 0x02	; 2
     b36:	8b e2       	ldi	r24, 0x2B	; 43
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, LED7);
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	8b e2       	ldi	r24, 0x2B	; 43
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, LED8);
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	8b e2       	ldi	r24, 0x2B	; 43
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
     b52:	83 c0       	rjmp	.+262    	; 0xc5a <__stack+0x35b>
    }
    else if(distBack <= 50)
     b54:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <distBack>
     b58:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <distBack+0x1>
     b5c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <distBack+0x2>
     b60:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <distBack+0x3>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	48 e4       	ldi	r20, 0x48	; 72
     b6a:	52 e4       	ldi	r21, 0x42	; 66
     b6c:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     b70:	18 16       	cp	r1, r24
     b72:	ac f0       	brlt	.+42     	; 0xb9e <__stack+0x29f>
    {
        GPIO_write_high(&PORTD, LED5);
     b74:	63 e0       	ldi	r22, 0x03	; 3
     b76:	8b e2       	ldi	r24, 0x2B	; 43
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, LED6);
     b7e:	62 e0       	ldi	r22, 0x02	; 2
     b80:	8b e2       	ldi	r24, 0x2B	; 43
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, LED7);
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	8b e2       	ldi	r24, 0x2B	; 43
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTD, LED8);
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	8b e2       	ldi	r24, 0x2B	; 43
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     b9c:	5e c0       	rjmp	.+188    	; 0xc5a <__stack+0x35b>

    }
    else if(distBack <= 100)
     b9e:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <distBack>
     ba2:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <distBack+0x1>
     ba6:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <distBack+0x2>
     baa:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <distBack+0x3>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	48 ec       	ldi	r20, 0xC8	; 200
     bb4:	52 e4       	ldi	r21, 0x42	; 66
     bb6:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     bba:	18 16       	cp	r1, r24
     bbc:	ac f0       	brlt	.+42     	; 0xbe8 <__stack+0x2e9>
    {
        GPIO_write_high(&PORTD, LED5);
     bbe:	63 e0       	ldi	r22, 0x03	; 3
     bc0:	8b e2       	ldi	r24, 0x2B	; 43
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, LED6);
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	8b e2       	ldi	r24, 0x2B	; 43
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTD, LED7);
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	8b e2       	ldi	r24, 0x2B	; 43
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, LED8);
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	8b e2       	ldi	r24, 0x2B	; 43
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     be6:	39 c0       	rjmp	.+114    	; 0xc5a <__stack+0x35b>
    }
    else if(distBack <= 125)
     be8:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <distBack>
     bec:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <distBack+0x1>
     bf0:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <distBack+0x2>
     bf4:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <distBack+0x3>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	4a ef       	ldi	r20, 0xFA	; 250
     bfe:	52 e4       	ldi	r21, 0x42	; 66
     c00:	0e 94 d3 06 	call	0xda6	; 0xda6 <__cmpsf2>
     c04:	18 16       	cp	r1, r24
     c06:	ac f0       	brlt	.+42     	; 0xc32 <__stack+0x333>
    {
        GPIO_write_high(&PORTD, LED5);
     c08:	63 e0       	ldi	r22, 0x03	; 3
     c0a:	8b e2       	ldi	r24, 0x2B	; 43
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTD, LED6);
     c12:	62 e0       	ldi	r22, 0x02	; 2
     c14:	8b e2       	ldi	r24, 0x2B	; 43
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, LED7);
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	8b e2       	ldi	r24, 0x2B	; 43
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, LED8);
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	8b e2       	ldi	r24, 0x2B	; 43
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     c30:	14 c0       	rjmp	.+40     	; 0xc5a <__stack+0x35b>
    }
    else
    {
        GPIO_write_low(&PORTD, LED5);
     c32:	63 e0       	ldi	r22, 0x03	; 3
     c34:	8b e2       	ldi	r24, 0x2B	; 43
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, LED6);
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	8b e2       	ldi	r24, 0x2B	; 43
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, LED7);
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	8b e2       	ldi	r24, 0x2B	; 43
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, LED8);
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	8b e2       	ldi	r24, 0x2B	; 43
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    }
	

	
	
}
     c5a:	ff 91       	pop	r31
     c5c:	ef 91       	pop	r30
     c5e:	bf 91       	pop	r27
     c60:	af 91       	pop	r26
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	7f 91       	pop	r23
     c68:	6f 91       	pop	r22
     c6a:	5f 91       	pop	r21
     c6c:	4f 91       	pop	r20
     c6e:	3f 91       	pop	r19
     c70:	2f 91       	pop	r18
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	1f 90       	pop	r1
     c7a:	18 95       	reti

00000c7c <__vector_18>:
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	2f 93       	push	r18
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
     c90:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     c94:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     c98:	8c 71       	andi	r24, 0x1C	; 28
     c9a:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <UART_RxHead>
     c9e:	ef 5f       	subi	r30, 0xFF	; 255
     ca0:	ef 71       	andi	r30, 0x1F	; 31
     ca2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <UART_RxTail>
     ca6:	e9 17       	cp	r30, r25
     ca8:	39 f0       	breq	.+14     	; 0xcb8 <__vector_18+0x3c>
     caa:	e0 93 bf 01 	sts	0x01BF, r30	; 0x8001bf <UART_RxHead>
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	ee 53       	subi	r30, 0x3E	; 62
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	20 83       	st	Z, r18
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <__vector_18+0x3e>
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <UART_LastRxError>
     cbe:	89 2b       	or	r24, r25
     cc0:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <UART_LastRxError>
     cc4:	ff 91       	pop	r31
     cc6:	ef 91       	pop	r30
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <__vector_19>:
     cd8:	1f 92       	push	r1
     cda:	0f 92       	push	r0
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	0f 92       	push	r0
     ce0:	11 24       	eor	r1, r1
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
     cea:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <UART_TxHead>
     cee:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <UART_TxTail>
     cf2:	98 17       	cp	r25, r24
     cf4:	69 f0       	breq	.+26     	; 0xd10 <__vector_19+0x38>
     cf6:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <UART_TxTail>
     cfa:	ef 5f       	subi	r30, 0xFF	; 255
     cfc:	ef 71       	andi	r30, 0x1F	; 31
     cfe:	e0 93 c0 01 	sts	0x01C0, r30	; 0x8001c0 <UART_TxTail>
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	ee 51       	subi	r30, 0x1E	; 30
     d06:	fe 4f       	sbci	r31, 0xFE	; 254
     d08:	80 81       	ld	r24, Z
     d0a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__vector_19+0x42>
     d10:	e1 ec       	ldi	r30, 0xC1	; 193
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8f 7d       	andi	r24, 0xDF	; 223
     d18:	80 83       	st	Z, r24
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <uart_init>:
     d2c:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <UART_TxHead>
     d30:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <UART_TxTail>
     d34:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <UART_RxHead>
     d38:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <UART_RxTail>
     d3c:	99 23       	and	r25, r25
     d3e:	1c f4       	brge	.+6      	; 0xd46 <uart_init+0x1a>
     d40:	22 e0       	ldi	r18, 0x02	; 2
     d42:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     d46:	90 78       	andi	r25, 0x80	; 128
     d48:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     d4c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     d50:	88 e9       	ldi	r24, 0x98	; 152
     d52:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     d56:	86 e0       	ldi	r24, 0x06	; 6
     d58:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     d5c:	08 95       	ret

00000d5e <uart_putc>:
     d5e:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <UART_TxHead>
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	2f 71       	andi	r18, 0x1F	; 31
     d66:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <UART_TxTail>
     d6a:	29 17       	cp	r18, r25
     d6c:	e1 f3       	breq	.-8      	; 0xd66 <uart_putc+0x8>
     d6e:	e2 2f       	mov	r30, r18
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	ee 51       	subi	r30, 0x1E	; 30
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	80 83       	st	Z, r24
     d78:	20 93 c1 01 	sts	0x01C1, r18	; 0x8001c1 <UART_TxHead>
     d7c:	e1 ec       	ldi	r30, 0xC1	; 193
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	80 62       	ori	r24, 0x20	; 32
     d84:	80 83       	st	Z, r24
     d86:	08 95       	ret

00000d88 <uart_puts>:
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	ec 01       	movw	r28, r24
     d8e:	88 81       	ld	r24, Y
     d90:	88 23       	and	r24, r24
     d92:	31 f0       	breq	.+12     	; 0xda0 <uart_puts+0x18>
     d94:	21 96       	adiw	r28, 0x01	; 1
     d96:	0e 94 af 06 	call	0xd5e	; 0xd5e <uart_putc>
     d9a:	89 91       	ld	r24, Y+
     d9c:	81 11       	cpse	r24, r1
     d9e:	fb cf       	rjmp	.-10     	; 0xd96 <uart_puts+0xe>
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <__cmpsf2>:
     da6:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_cmp>
     daa:	08 f4       	brcc	.+2      	; 0xdae <__cmpsf2+0x8>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	08 95       	ret

00000db0 <__fixsfsi>:
     db0:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fixunssfsi>
     db4:	68 94       	set
     db6:	b1 11       	cpse	r27, r1
     db8:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_szero>
     dbc:	08 95       	ret

00000dbe <__fixunssfsi>:
     dbe:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_splitA>
     dc2:	88 f0       	brcs	.+34     	; 0xde6 <__fixunssfsi+0x28>
     dc4:	9f 57       	subi	r25, 0x7F	; 127
     dc6:	98 f0       	brcs	.+38     	; 0xdee <__fixunssfsi+0x30>
     dc8:	b9 2f       	mov	r27, r25
     dca:	99 27       	eor	r25, r25
     dcc:	b7 51       	subi	r27, 0x17	; 23
     dce:	b0 f0       	brcs	.+44     	; 0xdfc <__fixunssfsi+0x3e>
     dd0:	e1 f0       	breq	.+56     	; 0xe0a <__fixunssfsi+0x4c>
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	88 1f       	adc	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	1a f0       	brmi	.+6      	; 0xde2 <__fixunssfsi+0x24>
     ddc:	ba 95       	dec	r27
     dde:	c9 f7       	brne	.-14     	; 0xdd2 <__fixunssfsi+0x14>
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <__fixunssfsi+0x4c>
     de2:	b1 30       	cpi	r27, 0x01	; 1
     de4:	91 f0       	breq	.+36     	; 0xe0a <__fixunssfsi+0x4c>
     de6:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_zero>
     dea:	b1 e0       	ldi	r27, 0x01	; 1
     dec:	08 95       	ret
     dee:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__fp_zero>
     df2:	67 2f       	mov	r22, r23
     df4:	78 2f       	mov	r23, r24
     df6:	88 27       	eor	r24, r24
     df8:	b8 5f       	subi	r27, 0xF8	; 248
     dfa:	39 f0       	breq	.+14     	; 0xe0a <__fixunssfsi+0x4c>
     dfc:	b9 3f       	cpi	r27, 0xF9	; 249
     dfe:	cc f3       	brlt	.-14     	; 0xdf2 <__fixunssfsi+0x34>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b3 95       	inc	r27
     e08:	d9 f7       	brne	.-10     	; 0xe00 <__fixunssfsi+0x42>
     e0a:	3e f4       	brtc	.+14     	; 0xe1a <__fixunssfsi+0x5c>
     e0c:	90 95       	com	r25
     e0e:	80 95       	com	r24
     e10:	70 95       	com	r23
     e12:	61 95       	neg	r22
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	08 95       	ret

00000e1c <__floatunsisf>:
     e1c:	e8 94       	clt
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <__floatsisf+0x12>

00000e20 <__floatsisf>:
     e20:	97 fb       	bst	r25, 7
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__floatsisf+0x12>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	99 23       	and	r25, r25
     e34:	a9 f0       	breq	.+42     	; 0xe60 <__floatsisf+0x40>
     e36:	f9 2f       	mov	r31, r25
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	bb 27       	eor	r27, r27
     e3c:	93 95       	inc	r25
     e3e:	f6 95       	lsr	r31
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f1 11       	cpse	r31, r1
     e4a:	f8 cf       	rjmp	.-16     	; 0xe3c <__floatsisf+0x1c>
     e4c:	fa f4       	brpl	.+62     	; 0xe8c <__floatsisf+0x6c>
     e4e:	bb 0f       	add	r27, r27
     e50:	11 f4       	brne	.+4      	; 0xe56 <__floatsisf+0x36>
     e52:	60 ff       	sbrs	r22, 0
     e54:	1b c0       	rjmp	.+54     	; 0xe8c <__floatsisf+0x6c>
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	16 c0       	rjmp	.+44     	; 0xe8c <__floatsisf+0x6c>
     e60:	88 23       	and	r24, r24
     e62:	11 f0       	breq	.+4      	; 0xe68 <__floatsisf+0x48>
     e64:	96 e9       	ldi	r25, 0x96	; 150
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <__floatsisf+0x6a>
     e68:	77 23       	and	r23, r23
     e6a:	21 f0       	breq	.+8      	; 0xe74 <__floatsisf+0x54>
     e6c:	9e e8       	ldi	r25, 0x8E	; 142
     e6e:	87 2f       	mov	r24, r23
     e70:	76 2f       	mov	r23, r22
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <__floatsisf+0x5e>
     e74:	66 23       	and	r22, r22
     e76:	71 f0       	breq	.+28     	; 0xe94 <__floatsisf+0x74>
     e78:	96 e8       	ldi	r25, 0x86	; 134
     e7a:	86 2f       	mov	r24, r22
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	2a f0       	brmi	.+10     	; 0xe8c <__floatsisf+0x6c>
     e82:	9a 95       	dec	r25
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	da f7       	brpl	.-10     	; 0xe82 <__floatsisf+0x62>
     e8c:	88 0f       	add	r24, r24
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	97 f9       	bld	r25, 7
     e94:	08 95       	ret

00000e96 <__fp_cmp>:
     e96:	99 0f       	add	r25, r25
     e98:	00 08       	sbc	r0, r0
     e9a:	55 0f       	add	r21, r21
     e9c:	aa 0b       	sbc	r26, r26
     e9e:	e0 e8       	ldi	r30, 0x80	; 128
     ea0:	fe ef       	ldi	r31, 0xFE	; 254
     ea2:	16 16       	cp	r1, r22
     ea4:	17 06       	cpc	r1, r23
     ea6:	e8 07       	cpc	r30, r24
     ea8:	f9 07       	cpc	r31, r25
     eaa:	c0 f0       	brcs	.+48     	; 0xedc <__fp_cmp+0x46>
     eac:	12 16       	cp	r1, r18
     eae:	13 06       	cpc	r1, r19
     eb0:	e4 07       	cpc	r30, r20
     eb2:	f5 07       	cpc	r31, r21
     eb4:	98 f0       	brcs	.+38     	; 0xedc <__fp_cmp+0x46>
     eb6:	62 1b       	sub	r22, r18
     eb8:	73 0b       	sbc	r23, r19
     eba:	84 0b       	sbc	r24, r20
     ebc:	95 0b       	sbc	r25, r21
     ebe:	39 f4       	brne	.+14     	; 0xece <__fp_cmp+0x38>
     ec0:	0a 26       	eor	r0, r26
     ec2:	61 f0       	breq	.+24     	; 0xedc <__fp_cmp+0x46>
     ec4:	23 2b       	or	r18, r19
     ec6:	24 2b       	or	r18, r20
     ec8:	25 2b       	or	r18, r21
     eca:	21 f4       	brne	.+8      	; 0xed4 <__fp_cmp+0x3e>
     ecc:	08 95       	ret
     ece:	0a 26       	eor	r0, r26
     ed0:	09 f4       	brne	.+2      	; 0xed4 <__fp_cmp+0x3e>
     ed2:	a1 40       	sbci	r26, 0x01	; 1
     ed4:	a6 95       	lsr	r26
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	81 1d       	adc	r24, r1
     eda:	81 1d       	adc	r24, r1
     edc:	08 95       	ret

00000ede <__fp_split3>:
     ede:	57 fd       	sbrc	r21, 7
     ee0:	90 58       	subi	r25, 0x80	; 128
     ee2:	44 0f       	add	r20, r20
     ee4:	55 1f       	adc	r21, r21
     ee6:	59 f0       	breq	.+22     	; 0xefe <__fp_splitA+0x10>
     ee8:	5f 3f       	cpi	r21, 0xFF	; 255
     eea:	71 f0       	breq	.+28     	; 0xf08 <__fp_splitA+0x1a>
     eec:	47 95       	ror	r20

00000eee <__fp_splitA>:
     eee:	88 0f       	add	r24, r24
     ef0:	97 fb       	bst	r25, 7
     ef2:	99 1f       	adc	r25, r25
     ef4:	61 f0       	breq	.+24     	; 0xf0e <__fp_splitA+0x20>
     ef6:	9f 3f       	cpi	r25, 0xFF	; 255
     ef8:	79 f0       	breq	.+30     	; 0xf18 <__fp_splitA+0x2a>
     efa:	87 95       	ror	r24
     efc:	08 95       	ret
     efe:	12 16       	cp	r1, r18
     f00:	13 06       	cpc	r1, r19
     f02:	14 06       	cpc	r1, r20
     f04:	55 1f       	adc	r21, r21
     f06:	f2 cf       	rjmp	.-28     	; 0xeec <__fp_split3+0xe>
     f08:	46 95       	lsr	r20
     f0a:	f1 df       	rcall	.-30     	; 0xeee <__fp_splitA>
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <__fp_splitA+0x30>
     f0e:	16 16       	cp	r1, r22
     f10:	17 06       	cpc	r1, r23
     f12:	18 06       	cpc	r1, r24
     f14:	99 1f       	adc	r25, r25
     f16:	f1 cf       	rjmp	.-30     	; 0xefa <__fp_splitA+0xc>
     f18:	86 95       	lsr	r24
     f1a:	71 05       	cpc	r23, r1
     f1c:	61 05       	cpc	r22, r1
     f1e:	08 94       	sec
     f20:	08 95       	ret

00000f22 <__fp_zero>:
     f22:	e8 94       	clt

00000f24 <__fp_szero>:
     f24:	bb 27       	eor	r27, r27
     f26:	66 27       	eor	r22, r22
     f28:	77 27       	eor	r23, r23
     f2a:	cb 01       	movw	r24, r22
     f2c:	97 f9       	bld	r25, 7
     f2e:	08 95       	ret

00000f30 <__gesf2>:
     f30:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_cmp>
     f34:	08 f4       	brcc	.+2      	; 0xf38 <__gesf2+0x8>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	08 95       	ret

00000f3a <__mulsf3>:
     f3a:	0e 94 b0 07 	call	0xf60	; 0xf60 <__mulsf3x>
     f3e:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__fp_round>
     f42:	0e 94 13 08 	call	0x1026	; 0x1026 <__fp_pscA>
     f46:	38 f0       	brcs	.+14     	; 0xf56 <__mulsf3+0x1c>
     f48:	0e 94 1a 08 	call	0x1034	; 0x1034 <__fp_pscB>
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <__mulsf3+0x1c>
     f4e:	95 23       	and	r25, r21
     f50:	11 f0       	breq	.+4      	; 0xf56 <__mulsf3+0x1c>
     f52:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__fp_inf>
     f56:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_nan>
     f5a:	11 24       	eor	r1, r1
     f5c:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_szero>

00000f60 <__mulsf3x>:
     f60:	0e 94 6f 07 	call	0xede	; 0xede <__fp_split3>
     f64:	70 f3       	brcs	.-36     	; 0xf42 <__mulsf3+0x8>

00000f66 <__mulsf3_pse>:
     f66:	95 9f       	mul	r25, r21
     f68:	c1 f3       	breq	.-16     	; 0xf5a <__mulsf3+0x20>
     f6a:	95 0f       	add	r25, r21
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	55 1f       	adc	r21, r21
     f70:	62 9f       	mul	r22, r18
     f72:	f0 01       	movw	r30, r0
     f74:	72 9f       	mul	r23, r18
     f76:	bb 27       	eor	r27, r27
     f78:	f0 0d       	add	r31, r0
     f7a:	b1 1d       	adc	r27, r1
     f7c:	63 9f       	mul	r22, r19
     f7e:	aa 27       	eor	r26, r26
     f80:	f0 0d       	add	r31, r0
     f82:	b1 1d       	adc	r27, r1
     f84:	aa 1f       	adc	r26, r26
     f86:	64 9f       	mul	r22, r20
     f88:	66 27       	eor	r22, r22
     f8a:	b0 0d       	add	r27, r0
     f8c:	a1 1d       	adc	r26, r1
     f8e:	66 1f       	adc	r22, r22
     f90:	82 9f       	mul	r24, r18
     f92:	22 27       	eor	r18, r18
     f94:	b0 0d       	add	r27, r0
     f96:	a1 1d       	adc	r26, r1
     f98:	62 1f       	adc	r22, r18
     f9a:	73 9f       	mul	r23, r19
     f9c:	b0 0d       	add	r27, r0
     f9e:	a1 1d       	adc	r26, r1
     fa0:	62 1f       	adc	r22, r18
     fa2:	83 9f       	mul	r24, r19
     fa4:	a0 0d       	add	r26, r0
     fa6:	61 1d       	adc	r22, r1
     fa8:	22 1f       	adc	r18, r18
     faa:	74 9f       	mul	r23, r20
     fac:	33 27       	eor	r19, r19
     fae:	a0 0d       	add	r26, r0
     fb0:	61 1d       	adc	r22, r1
     fb2:	23 1f       	adc	r18, r19
     fb4:	84 9f       	mul	r24, r20
     fb6:	60 0d       	add	r22, r0
     fb8:	21 1d       	adc	r18, r1
     fba:	82 2f       	mov	r24, r18
     fbc:	76 2f       	mov	r23, r22
     fbe:	6a 2f       	mov	r22, r26
     fc0:	11 24       	eor	r1, r1
     fc2:	9f 57       	subi	r25, 0x7F	; 127
     fc4:	50 40       	sbci	r21, 0x00	; 0
     fc6:	9a f0       	brmi	.+38     	; 0xfee <__mulsf3_pse+0x88>
     fc8:	f1 f0       	breq	.+60     	; 0x1006 <__mulsf3_pse+0xa0>
     fca:	88 23       	and	r24, r24
     fcc:	4a f0       	brmi	.+18     	; 0xfe0 <__mulsf3_pse+0x7a>
     fce:	ee 0f       	add	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	bb 1f       	adc	r27, r27
     fd4:	66 1f       	adc	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	88 1f       	adc	r24, r24
     fda:	91 50       	subi	r25, 0x01	; 1
     fdc:	50 40       	sbci	r21, 0x00	; 0
     fde:	a9 f7       	brne	.-22     	; 0xfca <__mulsf3_pse+0x64>
     fe0:	9e 3f       	cpi	r25, 0xFE	; 254
     fe2:	51 05       	cpc	r21, r1
     fe4:	80 f0       	brcs	.+32     	; 0x1006 <__mulsf3_pse+0xa0>
     fe6:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__fp_inf>
     fea:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__fp_szero>
     fee:	5f 3f       	cpi	r21, 0xFF	; 255
     ff0:	e4 f3       	brlt	.-8      	; 0xfea <__mulsf3_pse+0x84>
     ff2:	98 3e       	cpi	r25, 0xE8	; 232
     ff4:	d4 f3       	brlt	.-12     	; 0xfea <__mulsf3_pse+0x84>
     ff6:	86 95       	lsr	r24
     ff8:	77 95       	ror	r23
     ffa:	67 95       	ror	r22
     ffc:	b7 95       	ror	r27
     ffe:	f7 95       	ror	r31
    1000:	e7 95       	ror	r30
    1002:	9f 5f       	subi	r25, 0xFF	; 255
    1004:	c1 f7       	brne	.-16     	; 0xff6 <__mulsf3_pse+0x90>
    1006:	fe 2b       	or	r31, r30
    1008:	88 0f       	add	r24, r24
    100a:	91 1d       	adc	r25, r1
    100c:	96 95       	lsr	r25
    100e:	87 95       	ror	r24
    1010:	97 f9       	bld	r25, 7
    1012:	08 95       	ret

00001014 <__fp_inf>:
    1014:	97 f9       	bld	r25, 7
    1016:	9f 67       	ori	r25, 0x7F	; 127
    1018:	80 e8       	ldi	r24, 0x80	; 128
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	08 95       	ret

00001020 <__fp_nan>:
    1020:	9f ef       	ldi	r25, 0xFF	; 255
    1022:	80 ec       	ldi	r24, 0xC0	; 192
    1024:	08 95       	ret

00001026 <__fp_pscA>:
    1026:	00 24       	eor	r0, r0
    1028:	0a 94       	dec	r0
    102a:	16 16       	cp	r1, r22
    102c:	17 06       	cpc	r1, r23
    102e:	18 06       	cpc	r1, r24
    1030:	09 06       	cpc	r0, r25
    1032:	08 95       	ret

00001034 <__fp_pscB>:
    1034:	00 24       	eor	r0, r0
    1036:	0a 94       	dec	r0
    1038:	12 16       	cp	r1, r18
    103a:	13 06       	cpc	r1, r19
    103c:	14 06       	cpc	r1, r20
    103e:	05 06       	cpc	r0, r21
    1040:	08 95       	ret

00001042 <__fp_round>:
    1042:	09 2e       	mov	r0, r25
    1044:	03 94       	inc	r0
    1046:	00 0c       	add	r0, r0
    1048:	11 f4       	brne	.+4      	; 0x104e <__fp_round+0xc>
    104a:	88 23       	and	r24, r24
    104c:	52 f0       	brmi	.+20     	; 0x1062 <__fp_round+0x20>
    104e:	bb 0f       	add	r27, r27
    1050:	40 f4       	brcc	.+16     	; 0x1062 <__fp_round+0x20>
    1052:	bf 2b       	or	r27, r31
    1054:	11 f4       	brne	.+4      	; 0x105a <__fp_round+0x18>
    1056:	60 ff       	sbrs	r22, 0
    1058:	04 c0       	rjmp	.+8      	; 0x1062 <__fp_round+0x20>
    105a:	6f 5f       	subi	r22, 0xFF	; 255
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	08 95       	ret

00001064 <__itoa_ncheck>:
    1064:	bb 27       	eor	r27, r27
    1066:	4a 30       	cpi	r20, 0x0A	; 10
    1068:	31 f4       	brne	.+12     	; 0x1076 <__itoa_ncheck+0x12>
    106a:	99 23       	and	r25, r25
    106c:	22 f4       	brpl	.+8      	; 0x1076 <__itoa_ncheck+0x12>
    106e:	bd e2       	ldi	r27, 0x2D	; 45
    1070:	90 95       	com	r25
    1072:	81 95       	neg	r24
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__utoa_common>

0000107a <__utoa_ncheck>:
    107a:	bb 27       	eor	r27, r27

0000107c <__utoa_common>:
    107c:	fb 01       	movw	r30, r22
    107e:	55 27       	eor	r21, r21
    1080:	aa 27       	eor	r26, r26
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	aa 1f       	adc	r26, r26
    1088:	a4 17       	cp	r26, r20
    108a:	10 f0       	brcs	.+4      	; 0x1090 <__utoa_common+0x14>
    108c:	a4 1b       	sub	r26, r20
    108e:	83 95       	inc	r24
    1090:	50 51       	subi	r21, 0x10	; 16
    1092:	b9 f7       	brne	.-18     	; 0x1082 <__utoa_common+0x6>
    1094:	a0 5d       	subi	r26, 0xD0	; 208
    1096:	aa 33       	cpi	r26, 0x3A	; 58
    1098:	08 f0       	brcs	.+2      	; 0x109c <__utoa_common+0x20>
    109a:	a9 5d       	subi	r26, 0xD9	; 217
    109c:	a1 93       	st	Z+, r26
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	79 f7       	brne	.-34     	; 0x1080 <__utoa_common+0x4>
    10a2:	b1 11       	cpse	r27, r1
    10a4:	b1 93       	st	Z+, r27
    10a6:	11 92       	st	Z+, r1
    10a8:	cb 01       	movw	r24, r22
    10aa:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <strrev>

000010ae <strrev>:
    10ae:	dc 01       	movw	r26, r24
    10b0:	fc 01       	movw	r30, r24
    10b2:	67 2f       	mov	r22, r23
    10b4:	71 91       	ld	r23, Z+
    10b6:	77 23       	and	r23, r23
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <strrev+0x4>
    10ba:	32 97       	sbiw	r30, 0x02	; 2
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <strrev+0x18>
    10be:	7c 91       	ld	r23, X
    10c0:	6d 93       	st	X+, r22
    10c2:	70 83       	st	Z, r23
    10c4:	62 91       	ld	r22, -Z
    10c6:	ae 17       	cp	r26, r30
    10c8:	bf 07       	cpc	r27, r31
    10ca:	c8 f3       	brcs	.-14     	; 0x10be <strrev+0x10>
    10cc:	08 95       	ret

000010ce <_exit>:
    10ce:	f8 94       	cli

000010d0 <__stop_program>:
    10d0:	ff cf       	rjmp	.-2      	; 0x10d0 <__stop_program>
