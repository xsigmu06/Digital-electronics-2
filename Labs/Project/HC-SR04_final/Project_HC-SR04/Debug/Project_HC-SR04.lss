
Project_HC-SR04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000108a  0000111e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800184  00800184  000011a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002246  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4e  00000000  00000000  000035c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f61  00000000  00000000  00004210  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00005174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000742  00000000  00000000  0000555c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e9e  00000000  00000000  00005c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006b3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__vector_18>
      4c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e8       	ldi	r30, 0x8A	; 138
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 38       	cpi	r26, 0x84	; 132
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e8       	ldi	r26, 0x84	; 132
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 3e       	cpi	r26, 0xED	; 237
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 42 01 	call	0x284	; 0x284 <main>
      9e:	0c 94 43 08 	jmp	0x1086	; 0x1086 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;							// Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
      a6:	fc 01       	movw	r30, r24
      a8:	40 81       	ld	r20, Z
      aa:	21 e0       	ldi	r18, 0x01	; 1
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
      b0:	22 0f       	add	r18, r18
      b2:	33 1f       	adc	r19, r19
      b4:	6a 95       	dec	r22
      b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
      b8:	24 2b       	or	r18, r20
      ba:	20 83       	st	Z, r18
      bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
      be:	fc 01       	movw	r30, r24
      c0:	80 81       	ld	r24, Z
      c2:	21 e0       	ldi	r18, 0x01	; 1
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
      c8:	22 0f       	add	r18, r18
      ca:	33 1f       	adc	r19, r19
      cc:	6a 95       	dec	r22
      ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
      d0:	20 95       	com	r18
      d2:	82 23       	and	r24, r18
      d4:	80 83       	st	Z, r24
      d6:	80 81       	ld	r24, Z
      d8:	81 81       	ldd	r24, Z+1	; 0x01
      da:	28 23       	and	r18, r24
      dc:	21 83       	std	Z+1, r18	; 0x01
      de:	08 95       	ret

000000e0 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
      e0:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
      e2:	90 81       	ld	r25, Z
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	02 c0       	rjmp	.+4      	; 0xee <GPIO_write_low+0xe>
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	6a 95       	dec	r22
      f0:	e2 f7       	brpl	.-8      	; 0xea <GPIO_write_low+0xa>
      f2:	20 95       	com	r18
      f4:	29 23       	and	r18, r25
      f6:	20 83       	st	Z, r18
      f8:	08 95       	ret

000000fa <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
      fa:	fc 01       	movw	r30, r24
      fc:	40 81       	ld	r20, Z
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <GPIO_write_high+0xe>
     104:	22 0f       	add	r18, r18
     106:	33 1f       	adc	r19, r19
     108:	6a 95       	dec	r22
     10a:	e2 f7       	brpl	.-8      	; 0x104 <GPIO_write_high+0xa>
     10c:	24 2b       	or	r18, r20
     10e:	20 83       	st	Z, r18
     110:	08 95       	ret

00000112 <GPIO_toggle>:
}

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
     112:	fc 01       	movw	r30, r24
     114:	40 81       	ld	r20, Z
     116:	21 e0       	ldi	r18, 0x01	; 1
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_toggle+0xe>
     11c:	22 0f       	add	r18, r18
     11e:	33 1f       	adc	r19, r19
     120:	6a 95       	dec	r22
     122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_toggle+0xa>
     124:	24 27       	eor	r18, r20
     126:	20 83       	st	Z, r18
     128:	08 95       	ret

0000012a <GPIO_read>:
}

/*--------------------------------------------------------------------*/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	if(bit_is_clear(*reg_name, pin_num))
     12a:	fc 01       	movw	r30, r24
     12c:	80 81       	ld	r24, Z
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	02 c0       	rjmp	.+4      	; 0x136 <GPIO_read+0xc>
     132:	95 95       	asr	r25
     134:	87 95       	ror	r24
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <GPIO_read+0x8>
	}
	else
	{
		return 1;
	}
     13a:	81 70       	andi	r24, 0x01	; 1
     13c:	08 95       	ret

0000013e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     13e:	29 9a       	sbi	0x05, 1	; 5
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <toggle_e+0x4>
     146:	00 00       	nop
     148:	29 98       	cbi	0x05, 1	; 5
     14a:	08 95       	ret

0000014c <lcd_write>:
     14c:	cf 93       	push	r28
     14e:	c8 2f       	mov	r28, r24
     150:	66 23       	and	r22, r22
     152:	11 f0       	breq	.+4      	; 0x158 <lcd_write+0xc>
     154:	28 9a       	sbi	0x05, 0	; 5
     156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_write+0xe>
     158:	28 98       	cbi	0x05, 0	; 5
     15a:	54 9a       	sbi	0x0a, 4	; 10
     15c:	55 9a       	sbi	0x0a, 5	; 10
     15e:	56 9a       	sbi	0x0a, 6	; 10
     160:	57 9a       	sbi	0x0a, 7	; 10
     162:	5f 98       	cbi	0x0b, 7	; 11
     164:	5e 98       	cbi	0x0b, 6	; 11
     166:	5d 98       	cbi	0x0b, 5	; 11
     168:	5c 98       	cbi	0x0b, 4	; 11
     16a:	cc 23       	and	r28, r28
     16c:	0c f4       	brge	.+2      	; 0x170 <lcd_write+0x24>
     16e:	5f 9a       	sbi	0x0b, 7	; 11
     170:	c6 fd       	sbrc	r28, 6
     172:	5e 9a       	sbi	0x0b, 6	; 11
     174:	c5 fd       	sbrc	r28, 5
     176:	5d 9a       	sbi	0x0b, 5	; 11
     178:	c4 fd       	sbrc	r28, 4
     17a:	5c 9a       	sbi	0x0b, 4	; 11
     17c:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     180:	5f 98       	cbi	0x0b, 7	; 11
     182:	5e 98       	cbi	0x0b, 6	; 11
     184:	5d 98       	cbi	0x0b, 5	; 11
     186:	5c 98       	cbi	0x0b, 4	; 11
     188:	c3 fd       	sbrc	r28, 3
     18a:	5f 9a       	sbi	0x0b, 7	; 11
     18c:	c2 fd       	sbrc	r28, 2
     18e:	5e 9a       	sbi	0x0b, 6	; 11
     190:	c1 fd       	sbrc	r28, 1
     192:	5d 9a       	sbi	0x0b, 5	; 11
     194:	c0 fd       	sbrc	r28, 0
     196:	5c 9a       	sbi	0x0b, 4	; 11
     198:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     19c:	5c 9a       	sbi	0x0b, 4	; 11
     19e:	5d 9a       	sbi	0x0b, 5	; 11
     1a0:	5e 9a       	sbi	0x0b, 6	; 11
     1a2:	5f 9a       	sbi	0x0b, 7	; 11
     1a4:	87 eb       	ldi	r24, 0xB7	; 183
     1a6:	9b e0       	ldi	r25, 0x0B	; 11
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_write+0x5c>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_write+0x62>
     1ae:	00 00       	nop
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <lcd_command>:
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
     1ba:	08 95       	ret

000001bc <lcd_gotoxy>:
     1bc:	61 11       	cpse	r22, r1
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <lcd_gotoxy+0xc>
     1c0:	80 58       	subi	r24, 0x80	; 128
     1c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     1c6:	08 95       	ret
     1c8:	80 54       	subi	r24, 0x40	; 64
     1ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     1ce:	08 95       	ret

000001d0 <lcd_clrscr>:
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
     1d6:	08 95       	ret

000001d8 <lcd_putc>:
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_write>
     1de:	08 95       	ret

000001e0 <lcd_puts>:
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
     1e6:	21 96       	adiw	r28, 0x01	; 1
     1e8:	fc 01       	movw	r30, r24
     1ea:	80 81       	ld	r24, Z
     1ec:	88 23       	and	r24, r24
     1ee:	29 f0       	breq	.+10     	; 0x1fa <lcd_puts+0x1a>
     1f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_putc>
     1f4:	89 91       	ld	r24, Y+
     1f6:	81 11       	cpse	r24, r1
     1f8:	fb cf       	rjmp	.-10     	; 0x1f0 <lcd_puts+0x10>
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     200:	cf 93       	push	r28
     202:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     204:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     206:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     208:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     20a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     20c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     20e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     210:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	99 ef       	ldi	r25, 0xF9	; 249
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <lcd_init+0x16>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_init+0x1c>
     21c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     21e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     220:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     222:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     226:	8f e1       	ldi	r24, 0x1F	; 31
     228:	9e e4       	ldi	r25, 0x4E	; 78
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x2a>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_init+0x30>
     230:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     232:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_init+0x3a>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_init+0x40>
     240:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     242:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x4a>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x50>
     250:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     252:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     254:	0e 94 9f 00 	call	0x13e	; 0x13e <toggle_e>
     258:	8f ef       	ldi	r24, 0xFF	; 255
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x5c>
     260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x62>
     262:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     264:	88 e2       	ldi	r24, 0x28	; 40
     266:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     26a:	88 e0       	ldi	r24, 0x08	; 8
     26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     270:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     27a:	8c 2f       	mov	r24, r28
     27c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_command>
}/* lcd_init */
     280:	cf 91       	pop	r28
     282:	08 95       	ret

00000284 <main>:

/* Function definitions ----------------------------------------------*/
int main(void)
{
    // Output pins (Trigger)
	GPIO_config_output(&DDRB, trigFront);
     284:	62 e0       	ldi	r22, 0x02	; 2
     286:	84 e2       	ldi	r24, 0x24	; 36
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, trigFront);
     28e:	62 e0       	ldi	r22, 0x02	; 2
     290:	85 e2       	ldi	r24, 0x25	; 37
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_config_output(&DDRB, trigBack);
     298:	64 e0       	ldi	r22, 0x04	; 4
     29a:	84 e2       	ldi	r24, 0x24	; 36
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, trigBack);
     2a2:	64 e0       	ldi	r22, 0x04	; 4
     2a4:	85 e2       	ldi	r24, 0x25	; 37
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	
	// Input pins (Echo)
	GPIO_config_input_nopull(&DDRB, echoFront);
     2ac:	63 e0       	ldi	r22, 0x03	; 3
     2ae:	84 e2       	ldi	r24, 0x24	; 36
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	GPIO_config_input_nopull(&DDRB, echoBack);
     2b6:	65 e0       	ldi	r22, 0x05	; 5
     2b8:	84 e2       	ldi	r24, 0x24	; 36
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
	
	// Front LEDs
	GPIO_config_output(&DDRC, fLED1);	
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	87 e2       	ldi	r24, 0x27	; 39
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, fLED2);
     2ca:	62 e0       	ldi	r22, 0x02	; 2
     2cc:	87 e2       	ldi	r24, 0x27	; 39
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRC, fLED3);
     2d4:	63 e0       	ldi	r22, 0x03	; 3
     2d6:	87 e2       	ldi	r24, 0x27	; 39
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRC, fLED4);
     2de:	64 e0       	ldi	r22, 0x04	; 4
     2e0:	87 e2       	ldi	r24, 0x27	; 39
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC, fLED1);
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	88 e2       	ldi	r24, 0x28	; 40
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_write_low(&PORTC, fLED2    );
     2f2:	62 e0       	ldi	r22, 0x02	; 2
     2f4:	88 e2       	ldi	r24, 0x28	; 40
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTC, fLED3);
     2fc:	63 e0       	ldi	r22, 0x03	; 3
     2fe:	88 e2       	ldi	r24, 0x28	; 40
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTC, fLED4);
     306:	64 e0       	ldi	r22, 0x04	; 4
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>

	// Back LEDs
	GPIO_config_output(&DDRD, bLED5);	
     310:	63 e0       	ldi	r22, 0x03	; 3
     312:	8a e2       	ldi	r24, 0x2A	; 42
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRD, bLED6);
     31a:	62 e0       	ldi	r22, 0x02	; 2
     31c:	8a e2       	ldi	r24, 0x2A	; 42
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, bLED7);
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	8a e2       	ldi	r24, 0x2A	; 42
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, bLED8);
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	8a e2       	ldi	r24, 0x2A	; 42
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTD, bLED8); 
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	8b e2       	ldi	r24, 0x2B	; 43
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTD, bLED7);
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	8b e2       	ldi	r24, 0x2B	; 43
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    GPIO_write_low(&PORTD, bLED5);
     34c:	63 e0       	ldi	r22, 0x03	; 3
     34e:	8b e2       	ldi	r24, 0x2B	; 43
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	GPIO_write_low(&PORTD, bLED6);	
     356:	62 e0       	ldi	r22, 0x02	; 2
     358:	8b e2       	ldi	r24, 0x2B	; 43
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>

    // Speaker
    GPIO_config_output(&DDRC, speaker);
     360:	65 e0       	ldi	r22, 0x05	; 5
     362:	87 e2       	ldi	r24, 0x27	; 39
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC, speaker);
     36a:	65 e0       	ldi	r22, 0x05	; 5
     36c:	88 e2       	ldi	r24, 0x28	; 40
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
     374:	8c e0       	ldi	r24, 0x0C	; 12
     376:	0e 94 00 01 	call	0x200	; 0x200 <lcd_init>
    lcd_gotoxy(0, 0);
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("Front: Standby..");
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
    lcd_gotoxy(0, 1);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts(" Back: Standby..");
     392:	87 e1       	ldi	r24, 0x17	; 23
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
    
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
     39a:	87 e6       	ldi	r24, 0x67	; 103
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 72 06 	call	0xce4	; 0xce4 <uart_init>
    uart_puts("Welcome.\n\n");
     3a2:	88 e2       	ldi	r24, 0x28	; 40
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
    //uart_puts("Please, fasten your seatbelt.\n\n");

    // Configure 8-bit Timer/Counter0
    // Enable interrupt and set the overflow prescaler to 16 us
    // Used for measuring and calculating distance
    TIM0_overflow_16us();
     3aa:	85 b5       	in	r24, 0x25	; 37
     3ac:	89 7f       	andi	r24, 0xF9	; 249
     3ae:	85 bd       	out	0x25, r24	; 37
     3b0:	85 b5       	in	r24, 0x25	; 37
     3b2:	81 60       	ori	r24, 0x01	; 1
     3b4:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
     3b6:	ee e6       	ldi	r30, 0x6E	; 110
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	81 60       	ori	r24, 0x01	; 1
     3be:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1
    // Enable interrupt and set the overflow prescaler to 262 ms
    // Used for displaying result on LCD, uart, LEDs
    TIM1_overflow_262ms();
     3c0:	e1 e8       	ldi	r30, 0x81	; 129
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8b 7f       	andi	r24, 0xFB	; 251
     3c8:	80 83       	st	Z, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	83 60       	ori	r24, 0x03	; 3
     3ce:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();    
     3d0:	ef e6       	ldi	r30, 0x6F	; 111
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	80 83       	st	Z, r24
    
    // Timer/Counter2 is used for speaker
    // It is being configured inside Timer/Counter2  

    // Enables interrupts by setting the global interrupt mask
    sei();
     3da:	78 94       	sei
     3dc:	ff cf       	rjmp	.-2      	; 0x3dc <main+0x158>

000003de <__vector_16>:
 * ISR starts when Timer/Counter0 overflows. 
 * Timer0 OVF controls sending 10 us Trigger signal and 
 * measurement of Echo signal.
 */
ISR(TIMER0_OVF_vect)
{
     3de:	1f 92       	push	r1
     3e0:	0f 92       	push	r0
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	0f 92       	push	r0
     3e6:	11 24       	eor	r1, r1
     3e8:	2f 93       	push	r18
     3ea:	3f 93       	push	r19
     3ec:	4f 93       	push	r20
     3ee:	5f 93       	push	r21
     3f0:	6f 93       	push	r22
     3f2:	7f 93       	push	r23
     3f4:	8f 93       	push	r24
     3f6:	9f 93       	push	r25
     3f8:	af 93       	push	r26
     3fa:	bf 93       	push	r27
     3fc:	ef 93       	push	r30
     3fe:	ff 93       	push	r31
    static uint16_t number_of_overflows = 0;
    static uint16_t lenFront = 0;
    static uint16_t lenBack = 0;
    static state_t state= STATE_TRIG;
    
    number_of_overflows++;
     400:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <number_of_overflows.2259>
     404:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <number_of_overflows.2259+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <number_of_overflows.2259+0x1>
     40e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <number_of_overflows.2259>
    
    switch(state)
     412:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <state.2262>
     416:	22 23       	and	r18, r18
     418:	19 f0       	breq	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41a:	21 30       	cpi	r18, 0x01	; 1
     41c:	e9 f0       	breq	.+58     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     41e:	88 c0       	rjmp	.+272    	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
    {
        // Send 10 us signals to Trigger pins
        case STATE_TRIG:            
            GPIO_write_high(&PORTB, trigFront);
     420:	62 e0       	ldi	r22, 0x02	; 2
     422:	85 e2       	ldi	r24, 0x25	; 37
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
            GPIO_write_high(&PORTB, trigBack);
     42a:	64 e0       	ldi	r22, 0x04	; 4
     42c:	85 e2       	ldi	r24, 0x25	; 37
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
     434:	25 e3       	ldi	r18, 0x35	; 53
     436:	2a 95       	dec	r18
     438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43a:	00 00       	nop
            _delay_us(10);
            GPIO_write_low(&PORTB, trigFront);
     43c:	62 e0       	ldi	r22, 0x02	; 2
     43e:	85 e2       	ldi	r24, 0x25	; 37
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            GPIO_write_low(&PORTB, trigBack);
     446:	64 e0       	ldi	r22, 0x04	; 4
     448:	85 e2       	ldi	r24, 0x25	; 37
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
            
            state = STATE_ECHO_MEAS;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <state.2262>

            break;
     456:	6e c0       	rjmp	.+220    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
        // Measure length of H Echo signals
        // Recommended to be 60 ms long process
        case STATE_ECHO_MEAS:
            if (number_of_overflows <= 3750)  // 60 ms
     458:	87 3a       	cpi	r24, 0xA7	; 167
     45a:	9e 40       	sbci	r25, 0x0E	; 14
     45c:	10 f5       	brcc	.+68     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
            {
                if (GPIO_read(&PINB, echoFront))
     45e:	63 e0       	ldi	r22, 0x03	; 3
     460:	83 e2       	ldi	r24, 0x23	; 35
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
     468:	88 23       	and	r24, r24
     46a:	49 f0       	breq	.+18     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
                {
                    lenFront++;
     46c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <lenFront.2260>
     470:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <lenFront.2260+0x1>
     474:	01 96       	adiw	r24, 0x01	; 1
     476:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <lenFront.2260+0x1>
     47a:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <lenFront.2260>
                }
                if (GPIO_read(&PINB, echoBack))
     47e:	65 e0       	ldi	r22, 0x05	; 5
     480:	83 e2       	ldi	r24, 0x23	; 35
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 95 00 	call	0x12a	; 0x12a <GPIO_read>
     488:	88 23       	and	r24, r24
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	53 c0       	rjmp	.+166    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
                {
                    lenBack++;
     48e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <lenBack.2261>
     492:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <lenBack.2261+0x1>
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <lenBack.2261+0x1>
     49c:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <lenBack.2261>
     4a0:	49 c0       	rjmp	.+146    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
                }
            }
            else
            {
                // Calculate distance in cm
                number_of_overflows = 0;
     4a2:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <number_of_overflows.2259+0x1>
     4a6:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <number_of_overflows.2259>
                distFront = (float)lenFront * 0.017 * 16.0; // 16.0 us
     4aa:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <lenFront.2260>
     4ae:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <lenFront.2260+0x1>
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__floatunsisf>
     4ba:	26 e9       	ldi	r18, 0x96	; 150
     4bc:	33 e4       	ldi	r19, 0x43	; 67
     4be:	4b e8       	ldi	r20, 0x8B	; 139
     4c0:	5c e3       	ldi	r21, 0x3C	; 60
     4c2:	0e 94 79 07 	call	0xef2	; 0xef2 <__mulsf3>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e8       	ldi	r20, 0x80	; 128
     4cc:	51 e4       	ldi	r21, 0x41	; 65
     4ce:	0e 94 79 07 	call	0xef2	; 0xef2 <__mulsf3>
     4d2:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <distFront>
     4d6:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <distFront+0x1>
     4da:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <distFront+0x2>
     4de:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <distFront+0x3>
                distBack = (float)lenBack * 0.017 * 16.0;
     4e2:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <lenBack.2261>
     4e6:	70 91 94 01 	lds	r23, 0x0194	; 0x800194 <lenBack.2261+0x1>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__floatunsisf>
     4f2:	26 e9       	ldi	r18, 0x96	; 150
     4f4:	33 e4       	ldi	r19, 0x43	; 67
     4f6:	4b e8       	ldi	r20, 0x8B	; 139
     4f8:	5c e3       	ldi	r21, 0x3C	; 60
     4fa:	0e 94 79 07 	call	0xef2	; 0xef2 <__mulsf3>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e8       	ldi	r20, 0x80	; 128
     504:	51 e4       	ldi	r21, 0x41	; 65
     506:	0e 94 79 07 	call	0xef2	; 0xef2 <__mulsf3>
     50a:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <distBack>
     50e:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <distBack+0x1>
     512:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <distBack+0x2>
     516:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <distBack+0x3>
                lenFront = 0;
     51a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <lenFront.2260+0x1>
     51e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <lenFront.2260>
                lenBack = 0;
     522:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <lenBack.2261+0x1>
     526:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <lenBack.2261>
                state = STATE_TRIG;
     52a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <state.2262>
     52e:	02 c0       	rjmp	.+4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
            } 
            
            break;   
            
        default:
            state=STATE_TRIG;        
     530:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <state.2262>
    }
}
     534:	ff 91       	pop	r31
     536:	ef 91       	pop	r30
     538:	bf 91       	pop	r27
     53a:	af 91       	pop	r26
     53c:	9f 91       	pop	r25
     53e:	8f 91       	pop	r24
     540:	7f 91       	pop	r23
     542:	6f 91       	pop	r22
     544:	5f 91       	pop	r21
     546:	4f 91       	pop	r20
     548:	3f 91       	pop	r19
     54a:	2f 91       	pop	r18
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows.
 * Timer2 OVF controls tone frequency of 
 * speaker
 */
ISR(TIMER2_OVF_vect)
{
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	2f 93       	push	r18
     562:	3f 93       	push	r19
     564:	4f 93       	push	r20
     566:	5f 93       	push	r21
     568:	6f 93       	push	r22
     56a:	7f 93       	push	r23
     56c:	8f 93       	push	r24
     56e:	9f 93       	push	r25
     570:	af 93       	push	r26
     572:	bf 93       	push	r27
     574:	ef 93       	push	r30
     576:	ff 93       	push	r31
    static uint8_t counter = 0;
    counter++;
     578:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <counter.2278>
     57c:	8f 5f       	subi	r24, 0xFF	; 255
     57e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <counter.2278>

    GPIO_toggle(&PORTC, speaker);
     582:	65 e0       	ldi	r22, 0x05	; 5
     584:	88 e2       	ldi	r24, 0x28	; 40
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 89 00 	call	0x112	; 0x112 <GPIO_toggle>

    // TIM2_off is changed in TIM1 OVF
    if(counter >= TIM2_off)
     58c:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <counter.2278>
     590:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <TIM2_off>
     594:	98 17       	cp	r25, r24
     596:	38 f0       	brcs	.+14     	; 0x5a6 <__vector_9+0x50>
    {
        TIM2_overflow_interrupt_disable();
     598:	e0 e7       	ldi	r30, 0x70	; 112
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	8e 7f       	andi	r24, 0xFE	; 254
     5a0:	80 83       	st	Z, r24
        counter = 0;
     5a2:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <counter.2278>
    }
}
     5a6:	ff 91       	pop	r31
     5a8:	ef 91       	pop	r30
     5aa:	bf 91       	pop	r27
     5ac:	af 91       	pop	r26
     5ae:	9f 91       	pop	r25
     5b0:	8f 91       	pop	r24
     5b2:	7f 91       	pop	r23
     5b4:	6f 91       	pop	r22
     5b6:	5f 91       	pop	r21
     5b8:	4f 91       	pop	r20
     5ba:	3f 91       	pop	r19
     5bc:	2f 91       	pop	r18
     5be:	0f 90       	pop	r0
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	0f 90       	pop	r0
     5c4:	1f 90       	pop	r1
     5c6:	18 95       	reti

000005c8 <lcd_clear>:

// Function definition to clear LCD display
void lcd_clear(uint8_t pos)
{
    lcd_gotoxy(7, pos);
     5c8:	68 2f       	mov	r22, r24
     5ca:	87 e0       	ldi	r24, 0x07	; 7
     5cc:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
    lcd_puts("        ");   // clear symbols
     5d0:	83 e3       	ldi	r24, 0x33	; 51
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
     5d8:	08 95       	ret

000005da <displayResult>:
}

// Function definition to displays result on LCD and uart
void displayResult(volatile float DistanceFront, volatile float DistanceBack)
{    
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	2d 97       	sbiw	r28, 0x0d	; 13
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	6e 83       	std	Y+6, r22	; 0x06
     5fa:	7f 83       	std	Y+7, r23	; 0x07
     5fc:	88 87       	std	Y+8, r24	; 0x08
     5fe:	99 87       	std	Y+9, r25	; 0x09
     600:	2a 87       	std	Y+10, r18	; 0x0a
     602:	3b 87       	std	Y+11, r19	; 0x0b
     604:	4c 87       	std	Y+12, r20	; 0x0c
     606:	5d 87       	std	Y+13, r21	; 0x0d
    static float dist = 0.0, diffFront = 0.0, diffBack = 0.0;
    // For changing position of cursor to write on LCD's two rows 
    uint8_t pos = 0;
    // For changing UART output based on module
    char side[5]= "Front"; 
     608:	85 e0       	ldi	r24, 0x05	; 5
     60a:	e0 e0       	ldi	r30, 0x00	; 0
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	de 01       	movw	r26, r28
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <displayResult+0x38>
    // For deciding whether measured distance changed
    bool changed = false;
    
    // Decide which of the 2 modules measured new distance
     if (diffFront != DistanceFront)
     61a:	2e 81       	ldd	r18, Y+6	; 0x06
     61c:	3f 81       	ldd	r19, Y+7	; 0x07
     61e:	48 85       	ldd	r20, Y+8	; 0x08
     620:	59 85       	ldd	r21, Y+9	; 0x09
     622:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <diffFront.2287>
     626:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <diffFront.2287+0x1>
     62a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <diffFront.2287+0x2>
     62e:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <diffFront.2287+0x3>
     632:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     636:	88 23       	and	r24, r24
     638:	09 f4       	brne	.+2      	; 0x63c <displayResult+0x62>
     63a:	e0 c0       	rjmp	.+448    	; 0x7fc <displayResult+0x222>
    {	
        pos = 0;
        diffFront = DistanceFront;
     63c:	8e 81       	ldd	r24, Y+6	; 0x06
     63e:	9f 81       	ldd	r25, Y+7	; 0x07
     640:	a8 85       	ldd	r26, Y+8	; 0x08
     642:	b9 85       	ldd	r27, Y+9	; 0x09
     644:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <diffFront.2287>
     648:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <diffFront.2287+0x1>
     64c:	a0 93 8e 01 	sts	0x018E, r26	; 0x80018e <diffFront.2287+0x2>
     650:	b0 93 8f 01 	sts	0x018F, r27	; 0x80018f <diffFront.2287+0x3>
        dist = DistanceFront;
     654:	8e 81       	ldd	r24, Y+6	; 0x06
     656:	9f 81       	ldd	r25, Y+7	; 0x07
     658:	a8 85       	ldd	r26, Y+8	; 0x08
     65a:	b9 85       	ldd	r27, Y+9	; 0x09
     65c:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <dist.2286>
     660:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <dist.2286+0x1>
     664:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <dist.2286+0x2>
     668:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <dist.2286+0x3>
        strcpy(side, "Front");  // for assigning to array type
     66c:	86 e0       	ldi	r24, 0x06	; 6
     66e:	e0 e0       	ldi	r30, 0x00	; 0
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	de 01       	movw	r26, r28
     674:	11 96       	adiw	r26, 0x01	; 1
     676:	01 90       	ld	r0, Z+
     678:	0d 92       	st	X+, r0
     67a:	8a 95       	dec	r24
     67c:	e1 f7       	brne	.-8      	; 0x676 <displayResult+0x9c>
        changed = true;
    }
    if (diffBack != DistanceBack)
     67e:	2a 85       	ldd	r18, Y+10	; 0x0a
     680:	3b 85       	ldd	r19, Y+11	; 0x0b
     682:	4c 85       	ldd	r20, Y+12	; 0x0c
     684:	5d 85       	ldd	r21, Y+13	; 0x0d
     686:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <__data_end>
     68a:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <__data_end+0x1>
     68e:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end+0x2>
     692:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__data_end+0x3>
     696:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     69a:	88 23       	and	r24, r24
     69c:	19 f1       	breq	.+70     	; 0x6e4 <displayResult+0x10a>
    {  
        pos = 1;
        diffBack = DistanceBack;
     69e:	8a 85       	ldd	r24, Y+10	; 0x0a
     6a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     6a2:	ac 85       	ldd	r26, Y+12	; 0x0c
     6a4:	bd 85       	ldd	r27, Y+13	; 0x0d
     6a6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
     6aa:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
     6ae:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <__data_end+0x2>
     6b2:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <__data_end+0x3>
        dist = DistanceBack;
     6b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     6b8:	9b 85       	ldd	r25, Y+11	; 0x0b
     6ba:	ac 85       	ldd	r26, Y+12	; 0x0c
     6bc:	bd 85       	ldd	r27, Y+13	; 0x0d
     6be:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <dist.2286>
     6c2:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <dist.2286+0x1>
     6c6:	a0 93 8a 01 	sts	0x018A, r26	; 0x80018a <dist.2286+0x2>
     6ca:	b0 93 8b 01 	sts	0x018B, r27	; 0x80018b <dist.2286+0x3>
        strcpy(side, "Back");
     6ce:	85 e0       	ldi	r24, 0x05	; 5
     6d0:	ef e7       	ldi	r30, 0x7F	; 127
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	de 01       	movw	r26, r28
     6d6:	11 96       	adiw	r26, 0x01	; 1
     6d8:	01 90       	ld	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	8a 95       	dec	r24
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <displayResult+0xfe>
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
    {  
        pos = 1;
     6e0:	11 e0       	ldi	r17, 0x01	; 1
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <displayResult+0x10c>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
     6e4:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     6e6:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <dist.2286>
     6ea:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <dist.2286+0x1>
     6ee:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <dist.2286+0x2>
     6f2:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <dist.2286+0x3>
     6f6:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fixsfsi>
     6fa:	dc 01       	movw	r26, r24
     6fc:	cb 01       	movw	r24, r22
     6fe:	4a e0       	ldi	r20, 0x0A	; 10
     700:	68 ee       	ldi	r22, 0xE8	; 232
     702:	71 e0       	ldi	r23, 0x01	; 1
     704:	0e 94 0e 08 	call	0x101c	; 0x101c <__itoa_ncheck>
    {
        changed = false;
        itoa(dist, lcd_string, 10);
            
	    // Write result on LCD screen
	    if(dist < 2)  // Distance smaller than minimum possible
     708:	c0 90 88 01 	lds	r12, 0x0188	; 0x800188 <dist.2286>
     70c:	d0 90 89 01 	lds	r13, 0x0189	; 0x800189 <dist.2286+0x1>
     710:	e0 90 8a 01 	lds	r14, 0x018A	; 0x80018a <dist.2286+0x2>
     714:	f0 90 8b 01 	lds	r15, 0x018B	; 0x80018b <dist.2286+0x3>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	50 e4       	ldi	r21, 0x40	; 64
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     728:	88 23       	and	r24, r24
     72a:	c4 f4       	brge	.+48     	; 0x75c <displayResult+0x182>
	    {
		    lcd_clear(pos);
     72c:	81 2f       	mov	r24, r17
     72e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
		    lcd_gotoxy(7, pos);                                   
     732:	61 2f       	mov	r22, r17
     734:	87 e0       	ldi	r24, 0x07	; 7
     736:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts("<2 cm");
     73a:	8c e3       	ldi	r24, 0x3C	; 60
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
		    uart_puts(" object too close.");
     74a:	82 e4       	ldi	r24, 0x42	; 66
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
		    uart_puts("\n");   
     752:	81 e3       	ldi	r24, 0x31	; 49
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
     75a:	60 c0       	rjmp	.+192    	; 0x81c <displayResult+0x242>
	    }       
	    else if(dist <= 400)
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	48 ec       	ldi	r20, 0xC8	; 200
     762:	53 e4       	ldi	r21, 0x43	; 67
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     76c:	18 16       	cp	r1, r24
     76e:	24 f1       	brlt	.+72     	; 0x7b8 <displayResult+0x1de>
	    {
		    lcd_clear(pos);
     770:	81 2f       	mov	r24, r17
     772:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
		    lcd_gotoxy(8, pos);		    
     776:	61 2f       	mov	r22, r17
     778:	88 e0       	ldi	r24, 0x08	; 8
     77a:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(lcd_string);
     77e:	88 ee       	ldi	r24, 0xE8	; 232
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
            lcd_puts("  cm");                       
     786:	85 e5       	ldi	r24, 0x55	; 85
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
			
            uart_puts(side);		    
     78e:	ce 01       	movw	r24, r28
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
		    uart_puts(" distance: ");
     796:	8a e5       	ldi	r24, 0x5A	; 90
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
		    uart_puts(lcd_string);
     79e:	88 ee       	ldi	r24, 0xE8	; 232
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
            uart_puts("  cm");
     7a6:	85 e5       	ldi	r24, 0x55	; 85
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
		    uart_puts("\n");    
     7ae:	81 e3       	ldi	r24, 0x31	; 49
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
     7b6:	32 c0       	rjmp	.+100    	; 0x81c <displayResult+0x242>
	    }
	    else if(dist > 400)   // Distance greater than maximum possible
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	48 ec       	ldi	r20, 0xC8	; 200
     7be:	53 e4       	ldi	r21, 0x43	; 67
     7c0:	c7 01       	movw	r24, r14
     7c2:	b6 01       	movw	r22, r12
     7c4:	0e 94 74 07 	call	0xee8	; 0xee8 <__gesf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	44 f5       	brge	.+80     	; 0x81c <displayResult+0x242>
	    {
		    lcd_clear(pos);
     7cc:	81 2f       	mov	r24, r17
     7ce:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lcd_clear>
		    lcd_gotoxy(7, pos);
     7d2:	61 2f       	mov	r22, r17
     7d4:	87 e0       	ldi	r24, 0x07	; 7
     7d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_gotoxy>
		    lcd_puts(">400 cm");
     7da:	86 e6       	ldi	r24, 0x66	; 102
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_puts>
					    
            uart_puts(side);
     7e2:	ce 01       	movw	r24, r28
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
		    uart_puts(" object too far.");     
     7ea:	8e e6       	ldi	r24, 0x6E	; 110
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
		    uart_puts("\n"); 
     7f2:	81 e3       	ldi	r24, 0x31	; 49
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 a0 06 	call	0xd40	; 0xd40 <uart_puts>
	    }      
    }             
}
     7fa:	10 c0       	rjmp	.+32     	; 0x81c <displayResult+0x242>
        diffFront = DistanceFront;
        dist = DistanceFront;
        strcpy(side, "Front");  // for assigning to array type
        changed = true;
    }
    if (diffBack != DistanceBack)
     7fc:	2a 85       	ldd	r18, Y+10	; 0x0a
     7fe:	3b 85       	ldd	r19, Y+11	; 0x0b
     800:	4c 85       	ldd	r20, Y+12	; 0x0c
     802:	5d 85       	ldd	r21, Y+13	; 0x0d
     804:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <__data_end>
     808:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <__data_end+0x1>
     80c:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__data_end+0x2>
     810:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__data_end+0x3>
     814:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     818:	81 11       	cpse	r24, r1
     81a:	41 cf       	rjmp	.-382    	; 0x69e <displayResult+0xc4>
            uart_puts(side);
		    uart_puts(" object too far.");     
		    uart_puts("\n"); 
	    }      
    }             
}
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	08 95       	ret

00000838 <__vector_13>:
 * Timer1 OVF controls displaying results
 * on LCD, UART, LEDs and signalizing
 * closing distance with speaker
 */
ISR(TIMER1_OVF_vect)
{
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	11 24       	eor	r1, r1
     842:	2f 93       	push	r18
     844:	3f 93       	push	r19
     846:	4f 93       	push	r20
     848:	5f 93       	push	r21
     84a:	6f 93       	push	r22
     84c:	7f 93       	push	r23
     84e:	8f 93       	push	r24
     850:	9f 93       	push	r25
     852:	af 93       	push	r26
     854:	bf 93       	push	r27
     856:	ef 93       	push	r30
     858:	ff 93       	push	r31
    // Default prescaler for lower tone frequency of speaker
    TIM2_overflow_4ms();
     85a:	e1 eb       	ldi	r30, 0xB1	; 177
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	80 81       	ld	r24, Z
     860:	8e 7f       	andi	r24, 0xFE	; 254
     862:	80 83       	st	Z, r24
     864:	80 81       	ld	r24, Z
     866:	86 60       	ori	r24, 0x06	; 6
     868:	80 83       	st	Z, r24
    // For comparing smaller distance of 2 modules
    static uint16_t smallerDist = 0;
    
    // Function call to display on LCD, uart
    displayResult(distFront, distBack);
     86a:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <distBack>
     86e:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <distBack+0x1>
     872:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <distBack+0x2>
     876:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <distBack+0x3>
     87a:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <distFront>
     87e:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <distFront+0x1>
     882:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <distFront+0x2>
     886:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <distFront+0x3>
     88a:	0e 94 ed 02 	call	0x5da	; 0x5da <displayResult>
    
    // Decide what module the object is closer to
    if(distFront < distBack)
     88e:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <distFront>
     892:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <distFront+0x1>
     896:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <distFront+0x2>
     89a:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <distFront+0x3>
     89e:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <distBack>
     8a2:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <distBack+0x1>
     8a6:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <distBack+0x2>
     8aa:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <distBack+0x3>
     8ae:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     8b2:	88 23       	and	r24, r24
     8b4:	7c f4       	brge	.+30     	; 0x8d4 <__vector_13+0x9c>
    {
        smallerDist = distFront;
     8b6:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <distFront>
     8ba:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <distFront+0x1>
     8be:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <distFront+0x2>
     8c2:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <distFront+0x3>
     8c6:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fixunssfsi>
     8ca:	70 93 92 01 	sts	0x0192, r23	; 0x800192 <smallerDist.2272+0x1>
     8ce:	60 93 91 01 	sts	0x0191, r22	; 0x800191 <smallerDist.2272>
     8d2:	0e c0       	rjmp	.+28     	; 0x8f0 <__vector_13+0xb8>
    }
    else
    {
        smallerDist = distBack;
     8d4:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <distBack>
     8d8:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <distBack+0x1>
     8dc:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <distBack+0x2>
     8e0:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <distBack+0x3>
     8e4:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fixunssfsi>
     8e8:	70 93 92 01 	sts	0x0192, r23	; 0x800192 <smallerDist.2272+0x1>
     8ec:	60 93 91 01 	sts	0x0191, r22	; 0x800191 <smallerDist.2272>
    }
	
    // Generate tone based on distance	
	if(smallerDist <= 15)
     8f0:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <smallerDist.2272>
     8f4:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <smallerDist.2272+0x1>
     8f8:	80 31       	cpi	r24, 0x10	; 16
     8fa:	91 05       	cpc	r25, r1
     8fc:	88 f4       	brcc	.+34     	; 0x920 <__stack+0x21>
	{	
        // Change frequency of disabling TIM2 interrupt
		TIM2_off = 250;
     8fe:	8a ef       	ldi	r24, 0xFA	; 250
     900:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TIM2_off>
        // Increase frequency of speaker tone
		TIM2_overflow_2ms();
     904:	e1 eb       	ldi	r30, 0xB1	; 177
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	8d 7f       	andi	r24, 0xFD	; 253
     90c:	80 83       	st	Z, r24
     90e:	80 81       	ld	r24, Z
     910:	85 60       	ori	r24, 0x05	; 5
     912:	80 83       	st	Z, r24
		TIM2_overflow_interrupt_enable();
     914:	e0 e7       	ldi	r30, 0x70	; 112
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	80 81       	ld	r24, Z
     91a:	81 60       	ori	r24, 0x01	; 1
     91c:	80 83       	st	Z, r24
     91e:	29 c0       	rjmp	.+82     	; 0x972 <__stack+0x73>
	}
	else if(smallerDist <= 50)
     920:	83 33       	cpi	r24, 0x33	; 51
     922:	91 05       	cpc	r25, r1
     924:	48 f4       	brcc	.+18     	; 0x938 <__stack+0x39>
	{		
		TIM2_off = 50;
     926:	82 e3       	ldi	r24, 0x32	; 50
     928:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TIM2_off>
		TIM2_overflow_interrupt_enable();
     92c:	e0 e7       	ldi	r30, 0x70	; 112
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	81 60       	ori	r24, 0x01	; 1
     934:	80 83       	st	Z, r24
     936:	1d c0       	rjmp	.+58     	; 0x972 <__stack+0x73>
	}
	else if(smallerDist <= 100)
     938:	85 36       	cpi	r24, 0x65	; 101
     93a:	91 05       	cpc	r25, r1
     93c:	48 f4       	brcc	.+18     	; 0x950 <__stack+0x51>
	{
		TIM2_off = 10;
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TIM2_off>
		TIM2_overflow_interrupt_enable();
     944:	e0 e7       	ldi	r30, 0x70	; 112
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	81 60       	ori	r24, 0x01	; 1
     94c:	80 83       	st	Z, r24
     94e:	11 c0       	rjmp	.+34     	; 0x972 <__stack+0x73>
	}
	else if(smallerDist <= 125)
     950:	8e 37       	cpi	r24, 0x7E	; 126
     952:	91 05       	cpc	r25, r1
     954:	48 f4       	brcc	.+18     	; 0x968 <__stack+0x69>
	{		
		TIM2_off = 5;
     956:	85 e0       	ldi	r24, 0x05	; 5
     958:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <TIM2_off>
		TIM2_overflow_interrupt_enable();
     95c:	e0 e7       	ldi	r30, 0x70	; 112
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	81 60       	ori	r24, 0x01	; 1
     964:	80 83       	st	Z, r24
     966:	05 c0       	rjmp	.+10     	; 0x972 <__stack+0x73>
	}
	else
	{		
		TIM2_overflow_interrupt_disable();
     968:	e0 e7       	ldi	r30, 0x70	; 112
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	8e 7f       	andi	r24, 0xFE	; 254
     970:	80 83       	st	Z, r24
	}
	
	// Turn front LEDs on/off based on distance
	if(distFront <= 15)
     972:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <distFront>
     976:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <distFront+0x1>
     97a:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <distFront+0x2>
     97e:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <distFront+0x3>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	40 e7       	ldi	r20, 0x70	; 112
     988:	51 e4       	ldi	r21, 0x41	; 65
     98a:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     98e:	18 16       	cp	r1, r24
     990:	ac f0       	brlt	.+42     	; 0x9bc <__stack+0xbd>
	{
		GPIO_write_high(&PORTC, fLED1);
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	88 e2       	ldi	r24, 0x28	; 40
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, fLED2);
     99c:	62 e0       	ldi	r22, 0x02	; 2
     99e:	88 e2       	ldi	r24, 0x28	; 40
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, fLED3);
     9a6:	63 e0       	ldi	r22, 0x03	; 3
     9a8:	88 e2       	ldi	r24, 0x28	; 40
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, fLED4);
     9b0:	64 e0       	ldi	r22, 0x04	; 4
     9b2:	88 e2       	ldi	r24, 0x28	; 40
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
     9ba:	83 c0       	rjmp	.+262    	; 0xac2 <__stack+0x1c3>
	}
	else if(distFront <= 50)
     9bc:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <distFront>
     9c0:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <distFront+0x1>
     9c4:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <distFront+0x2>
     9c8:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <distFront+0x3>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	48 e4       	ldi	r20, 0x48	; 72
     9d2:	52 e4       	ldi	r21, 0x42	; 66
     9d4:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     9d8:	18 16       	cp	r1, r24
     9da:	ac f0       	brlt	.+42     	; 0xa06 <__stack+0x107>
	{
		GPIO_write_high(&PORTC, fLED1);
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	88 e2       	ldi	r24, 0x28	; 40
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, fLED2);
     9e6:	62 e0       	ldi	r22, 0x02	; 2
     9e8:	88 e2       	ldi	r24, 0x28	; 40
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, fLED3);
     9f0:	63 e0       	ldi	r22, 0x03	; 3
     9f2:	88 e2       	ldi	r24, 0x28	; 40
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, fLED4);
     9fa:	64 e0       	ldi	r22, 0x04	; 4
     9fc:	88 e2       	ldi	r24, 0x28	; 40
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     a04:	5e c0       	rjmp	.+188    	; 0xac2 <__stack+0x1c3>

	}
	else if(distFront <= 100)
     a06:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <distFront>
     a0a:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <distFront+0x1>
     a0e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <distFront+0x2>
     a12:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <distFront+0x3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	48 ec       	ldi	r20, 0xC8	; 200
     a1c:	52 e4       	ldi	r21, 0x42	; 66
     a1e:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     a22:	18 16       	cp	r1, r24
     a24:	ac f0       	brlt	.+42     	; 0xa50 <__stack+0x151>
	{
		GPIO_write_high(&PORTC, fLED1);
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	88 e2       	ldi	r24, 0x28	; 40
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_high(&PORTC, fLED2);
     a30:	62 e0       	ldi	r22, 0x02	; 2
     a32:	88 e2       	ldi	r24, 0x28	; 40
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, fLED3);
     a3a:	63 e0       	ldi	r22, 0x03	; 3
     a3c:	88 e2       	ldi	r24, 0x28	; 40
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, fLED4);
     a44:	64 e0       	ldi	r22, 0x04	; 4
     a46:	88 e2       	ldi	r24, 0x28	; 40
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     a4e:	39 c0       	rjmp	.+114    	; 0xac2 <__stack+0x1c3>
	}
	else if(distFront <= 125)
     a50:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <distFront>
     a54:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <distFront+0x1>
     a58:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <distFront+0x2>
     a5c:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <distFront+0x3>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	4a ef       	ldi	r20, 0xFA	; 250
     a66:	52 e4       	ldi	r21, 0x42	; 66
     a68:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     a6c:	18 16       	cp	r1, r24
     a6e:	ac f0       	brlt	.+42     	; 0xa9a <__stack+0x19b>
	{
		GPIO_write_high(&PORTC, fLED1);
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	88 e2       	ldi	r24, 0x28	; 40
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
		GPIO_write_low(&PORTC, fLED2);
     a7a:	62 e0       	ldi	r22, 0x02	; 2
     a7c:	88 e2       	ldi	r24, 0x28	; 40
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, fLED3);
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	88 e2       	ldi	r24, 0x28	; 40
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, fLED4);
     a8e:	64 e0       	ldi	r22, 0x04	; 4
     a90:	88 e2       	ldi	r24, 0x28	; 40
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     a98:	14 c0       	rjmp	.+40     	; 0xac2 <__stack+0x1c3>
	}
	else
	{
		GPIO_write_low(&PORTC, fLED1);
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	88 e2       	ldi	r24, 0x28	; 40
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, fLED2);
     aa4:	62 e0       	ldi	r22, 0x02	; 2
     aa6:	88 e2       	ldi	r24, 0x28	; 40
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, fLED3);
     aae:	63 e0       	ldi	r22, 0x03	; 3
     ab0:	88 e2       	ldi	r24, 0x28	; 40
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
		GPIO_write_low(&PORTC, fLED4);
     ab8:	64 e0       	ldi	r22, 0x04	; 4
     aba:	88 e2       	ldi	r24, 0x28	; 40
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
	}
	
    // Turn back LEDs on/off based on distance	       
	if(distBack <= 15)
     ac2:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <distBack>
     ac6:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <distBack+0x1>
     aca:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <distBack+0x2>
     ace:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <distBack+0x3>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e7       	ldi	r20, 0x70	; 112
     ad8:	51 e4       	ldi	r21, 0x41	; 65
     ada:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     ade:	18 16       	cp	r1, r24
     ae0:	ac f0       	brlt	.+42     	; 0xb0c <__stack+0x20d>
    {
        GPIO_write_high(&PORTD, bLED5);
     ae2:	63 e0       	ldi	r22, 0x03	; 3
     ae4:	8b e2       	ldi	r24, 0x2B	; 43
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, bLED6);
     aec:	62 e0       	ldi	r22, 0x02	; 2
     aee:	8b e2       	ldi	r24, 0x2B	; 43
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, bLED7);
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	8b e2       	ldi	r24, 0x2B	; 43
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, bLED8);
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	8b e2       	ldi	r24, 0x2B	; 43
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
     b0a:	83 c0       	rjmp	.+262    	; 0xc12 <__stack+0x313>
    }
    else if(distBack <= 50)
     b0c:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <distBack>
     b10:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <distBack+0x1>
     b14:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <distBack+0x2>
     b18:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <distBack+0x3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	48 e4       	ldi	r20, 0x48	; 72
     b22:	52 e4       	ldi	r21, 0x42	; 66
     b24:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     b28:	18 16       	cp	r1, r24
     b2a:	ac f0       	brlt	.+42     	; 0xb56 <__stack+0x257>
    {
        GPIO_write_high(&PORTD, bLED5);
     b2c:	63 e0       	ldi	r22, 0x03	; 3
     b2e:	8b e2       	ldi	r24, 0x2B	; 43
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, bLED6);
     b36:	62 e0       	ldi	r22, 0x02	; 2
     b38:	8b e2       	ldi	r24, 0x2B	; 43
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, bLED7);
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	8b e2       	ldi	r24, 0x2B	; 43
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTD, bLED8);
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	8b e2       	ldi	r24, 0x2B	; 43
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     b54:	5e c0       	rjmp	.+188    	; 0xc12 <__stack+0x313>

    }
    else if(distBack <= 100)
     b56:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <distBack>
     b5a:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <distBack+0x1>
     b5e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <distBack+0x2>
     b62:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <distBack+0x3>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	48 ec       	ldi	r20, 0xC8	; 200
     b6c:	52 e4       	ldi	r21, 0x42	; 66
     b6e:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     b72:	18 16       	cp	r1, r24
     b74:	ac f0       	brlt	.+42     	; 0xba0 <__stack+0x2a1>
    {
        GPIO_write_high(&PORTD, bLED5);
     b76:	63 e0       	ldi	r22, 0x03	; 3
     b78:	8b e2       	ldi	r24, 0x2B	; 43
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_high(&PORTD, bLED6);
     b80:	62 e0       	ldi	r22, 0x02	; 2
     b82:	8b e2       	ldi	r24, 0x2B	; 43
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTD, bLED7);
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	8b e2       	ldi	r24, 0x2B	; 43
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, bLED8);
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	8b e2       	ldi	r24, 0x2B	; 43
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     b9e:	39 c0       	rjmp	.+114    	; 0xc12 <__stack+0x313>
    }
    else if(distBack <= 125)
     ba0:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <distBack>
     ba4:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <distBack+0x1>
     ba8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <distBack+0x2>
     bac:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <distBack+0x3>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4a ef       	ldi	r20, 0xFA	; 250
     bb6:	52 e4       	ldi	r21, 0x42	; 66
     bb8:	0e 94 af 06 	call	0xd5e	; 0xd5e <__cmpsf2>
     bbc:	18 16       	cp	r1, r24
     bbe:	ac f0       	brlt	.+42     	; 0xbea <__stack+0x2eb>
    {
        GPIO_write_high(&PORTD, bLED5);
     bc0:	63 e0       	ldi	r22, 0x03	; 3
     bc2:	8b e2       	ldi	r24, 0x2B	; 43
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 7d 00 	call	0xfa	; 0xfa <GPIO_write_high>
        GPIO_write_low(&PORTD, bLED6);
     bca:	62 e0       	ldi	r22, 0x02	; 2
     bcc:	8b e2       	ldi	r24, 0x2B	; 43
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, bLED7);
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	8b e2       	ldi	r24, 0x2B	; 43
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, bLED8);
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	8b e2       	ldi	r24, 0x2B	; 43
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
     be8:	14 c0       	rjmp	.+40     	; 0xc12 <__stack+0x313>
    }
    else
    {
        GPIO_write_low(&PORTD, bLED5);
     bea:	63 e0       	ldi	r22, 0x03	; 3
     bec:	8b e2       	ldi	r24, 0x2B	; 43
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, bLED6);
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	8b e2       	ldi	r24, 0x2B	; 43
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, bLED7);
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	8b e2       	ldi	r24, 0x2B	; 43
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
        GPIO_write_low(&PORTD, bLED8);
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	8b e2       	ldi	r24, 0x2B	; 43
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 70 00 	call	0xe0	; 0xe0 <GPIO_write_low>
    }
}
     c12:	ff 91       	pop	r31
     c14:	ef 91       	pop	r30
     c16:	bf 91       	pop	r27
     c18:	af 91       	pop	r26
     c1a:	9f 91       	pop	r25
     c1c:	8f 91       	pop	r24
     c1e:	7f 91       	pop	r23
     c20:	6f 91       	pop	r22
     c22:	5f 91       	pop	r21
     c24:	4f 91       	pop	r20
     c26:	3f 91       	pop	r19
     c28:	2f 91       	pop	r18
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	11 24       	eor	r1, r1
     c3e:	2f 93       	push	r18
     c40:	8f 93       	push	r24
     c42:	9f 93       	push	r25
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
     c48:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     c4c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     c50:	8c 71       	andi	r24, 0x1C	; 28
     c52:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <UART_RxHead>
     c56:	ef 5f       	subi	r30, 0xFF	; 255
     c58:	ef 71       	andi	r30, 0x1F	; 31
     c5a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <UART_RxTail>
     c5e:	e9 17       	cp	r30, r25
     c60:	39 f0       	breq	.+14     	; 0xc70 <__vector_18+0x3c>
     c62:	e0 93 a5 01 	sts	0x01A5, r30	; 0x8001a5 <UART_RxHead>
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	e8 55       	subi	r30, 0x58	; 88
     c6a:	fe 4f       	sbci	r31, 0xFE	; 254
     c6c:	20 83       	st	Z, r18
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <__vector_18+0x3e>
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <UART_LastRxError>
     c76:	89 2b       	or	r24, r25
     c78:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <UART_LastRxError>
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <__vector_19>:
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	ef 93       	push	r30
     ca0:	ff 93       	push	r31
     ca2:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <UART_TxHead>
     ca6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <UART_TxTail>
     caa:	98 17       	cp	r25, r24
     cac:	69 f0       	breq	.+26     	; 0xcc8 <__vector_19+0x38>
     cae:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <UART_TxTail>
     cb2:	ef 5f       	subi	r30, 0xFF	; 255
     cb4:	ef 71       	andi	r30, 0x1F	; 31
     cb6:	e0 93 a6 01 	sts	0x01A6, r30	; 0x8001a6 <UART_TxTail>
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	e8 53       	subi	r30, 0x38	; 56
     cbe:	fe 4f       	sbci	r31, 0xFE	; 254
     cc0:	80 81       	ld	r24, Z
     cc2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <__vector_19+0x42>
     cc8:	e1 ec       	ldi	r30, 0xC1	; 193
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7d       	andi	r24, 0xDF	; 223
     cd0:	80 83       	st	Z, r24
     cd2:	ff 91       	pop	r31
     cd4:	ef 91       	pop	r30
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <uart_init>:
     ce4:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <UART_TxHead>
     ce8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <UART_TxTail>
     cec:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <UART_RxHead>
     cf0:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <UART_RxTail>
     cf4:	99 23       	and	r25, r25
     cf6:	1c f4       	brge	.+6      	; 0xcfe <uart_init+0x1a>
     cf8:	22 e0       	ldi	r18, 0x02	; 2
     cfa:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     cfe:	90 78       	andi	r25, 0x80	; 128
     d00:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     d04:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     d08:	88 e9       	ldi	r24, 0x98	; 152
     d0a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     d0e:	86 e0       	ldi	r24, 0x06	; 6
     d10:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     d14:	08 95       	ret

00000d16 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     d16:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <UART_TxHead>
     d1a:	2f 5f       	subi	r18, 0xFF	; 255
     d1c:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     d1e:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <UART_TxTail>
     d22:	29 17       	cp	r18, r25
     d24:	e1 f3       	breq	.-8      	; 0xd1e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     d26:	e2 2f       	mov	r30, r18
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	e8 53       	subi	r30, 0x38	; 56
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     d30:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     d34:	e1 ec       	ldi	r30, 0xC1	; 193
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 62       	ori	r24, 0x20	; 32
     d3c:	80 83       	st	Z, r24
     d3e:	08 95       	ret

00000d40 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	ec 01       	movw	r28, r24
    while (*s)
     d46:	88 81       	ld	r24, Y
     d48:	88 23       	and	r24, r24
     d4a:	31 f0       	breq	.+12     	; 0xd58 <uart_puts+0x18>
     d4c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
     d4e:	0e 94 8b 06 	call	0xd16	; 0xd16 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
     d52:	89 91       	ld	r24, Y+
     d54:	81 11       	cpse	r24, r1
     d56:	fb cf       	rjmp	.-10     	; 0xd4e <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <__cmpsf2>:
     d5e:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fp_cmp>
     d62:	08 f4       	brcc	.+2      	; 0xd66 <__cmpsf2+0x8>
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	08 95       	ret

00000d68 <__fixsfsi>:
     d68:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fixunssfsi>
     d6c:	68 94       	set
     d6e:	b1 11       	cpse	r27, r1
     d70:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_szero>
     d74:	08 95       	ret

00000d76 <__fixunssfsi>:
     d76:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_splitA>
     d7a:	88 f0       	brcs	.+34     	; 0xd9e <__fixunssfsi+0x28>
     d7c:	9f 57       	subi	r25, 0x7F	; 127
     d7e:	98 f0       	brcs	.+38     	; 0xda6 <__fixunssfsi+0x30>
     d80:	b9 2f       	mov	r27, r25
     d82:	99 27       	eor	r25, r25
     d84:	b7 51       	subi	r27, 0x17	; 23
     d86:	b0 f0       	brcs	.+44     	; 0xdb4 <__fixunssfsi+0x3e>
     d88:	e1 f0       	breq	.+56     	; 0xdc2 <__fixunssfsi+0x4c>
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	1a f0       	brmi	.+6      	; 0xd9a <__fixunssfsi+0x24>
     d94:	ba 95       	dec	r27
     d96:	c9 f7       	brne	.-14     	; 0xd8a <__fixunssfsi+0x14>
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <__fixunssfsi+0x4c>
     d9a:	b1 30       	cpi	r27, 0x01	; 1
     d9c:	91 f0       	breq	.+36     	; 0xdc2 <__fixunssfsi+0x4c>
     d9e:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_zero>
     da2:	b1 e0       	ldi	r27, 0x01	; 1
     da4:	08 95       	ret
     da6:	0c 94 6d 07 	jmp	0xeda	; 0xeda <__fp_zero>
     daa:	67 2f       	mov	r22, r23
     dac:	78 2f       	mov	r23, r24
     dae:	88 27       	eor	r24, r24
     db0:	b8 5f       	subi	r27, 0xF8	; 248
     db2:	39 f0       	breq	.+14     	; 0xdc2 <__fixunssfsi+0x4c>
     db4:	b9 3f       	cpi	r27, 0xF9	; 249
     db6:	cc f3       	brlt	.-14     	; 0xdaa <__fixunssfsi+0x34>
     db8:	86 95       	lsr	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b3 95       	inc	r27
     dc0:	d9 f7       	brne	.-10     	; 0xdb8 <__fixunssfsi+0x42>
     dc2:	3e f4       	brtc	.+14     	; 0xdd2 <__fixunssfsi+0x5c>
     dc4:	90 95       	com	r25
     dc6:	80 95       	com	r24
     dc8:	70 95       	com	r23
     dca:	61 95       	neg	r22
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	08 95       	ret

00000dd4 <__floatunsisf>:
     dd4:	e8 94       	clt
     dd6:	09 c0       	rjmp	.+18     	; 0xdea <__floatsisf+0x12>

00000dd8 <__floatsisf>:
     dd8:	97 fb       	bst	r25, 7
     dda:	3e f4       	brtc	.+14     	; 0xdea <__floatsisf+0x12>
     ddc:	90 95       	com	r25
     dde:	80 95       	com	r24
     de0:	70 95       	com	r23
     de2:	61 95       	neg	r22
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	8f 4f       	sbci	r24, 0xFF	; 255
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	99 23       	and	r25, r25
     dec:	a9 f0       	breq	.+42     	; 0xe18 <__floatsisf+0x40>
     dee:	f9 2f       	mov	r31, r25
     df0:	96 e9       	ldi	r25, 0x96	; 150
     df2:	bb 27       	eor	r27, r27
     df4:	93 95       	inc	r25
     df6:	f6 95       	lsr	r31
     df8:	87 95       	ror	r24
     dfa:	77 95       	ror	r23
     dfc:	67 95       	ror	r22
     dfe:	b7 95       	ror	r27
     e00:	f1 11       	cpse	r31, r1
     e02:	f8 cf       	rjmp	.-16     	; 0xdf4 <__floatsisf+0x1c>
     e04:	fa f4       	brpl	.+62     	; 0xe44 <__floatsisf+0x6c>
     e06:	bb 0f       	add	r27, r27
     e08:	11 f4       	brne	.+4      	; 0xe0e <__floatsisf+0x36>
     e0a:	60 ff       	sbrs	r22, 0
     e0c:	1b c0       	rjmp	.+54     	; 0xe44 <__floatsisf+0x6c>
     e0e:	6f 5f       	subi	r22, 0xFF	; 255
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	16 c0       	rjmp	.+44     	; 0xe44 <__floatsisf+0x6c>
     e18:	88 23       	and	r24, r24
     e1a:	11 f0       	breq	.+4      	; 0xe20 <__floatsisf+0x48>
     e1c:	96 e9       	ldi	r25, 0x96	; 150
     e1e:	11 c0       	rjmp	.+34     	; 0xe42 <__floatsisf+0x6a>
     e20:	77 23       	and	r23, r23
     e22:	21 f0       	breq	.+8      	; 0xe2c <__floatsisf+0x54>
     e24:	9e e8       	ldi	r25, 0x8E	; 142
     e26:	87 2f       	mov	r24, r23
     e28:	76 2f       	mov	r23, r22
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <__floatsisf+0x5e>
     e2c:	66 23       	and	r22, r22
     e2e:	71 f0       	breq	.+28     	; 0xe4c <__floatsisf+0x74>
     e30:	96 e8       	ldi	r25, 0x86	; 134
     e32:	86 2f       	mov	r24, r22
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	2a f0       	brmi	.+10     	; 0xe44 <__floatsisf+0x6c>
     e3a:	9a 95       	dec	r25
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	88 1f       	adc	r24, r24
     e42:	da f7       	brpl	.-10     	; 0xe3a <__floatsisf+0x62>
     e44:	88 0f       	add	r24, r24
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	97 f9       	bld	r25, 7
     e4c:	08 95       	ret

00000e4e <__fp_cmp>:
     e4e:	99 0f       	add	r25, r25
     e50:	00 08       	sbc	r0, r0
     e52:	55 0f       	add	r21, r21
     e54:	aa 0b       	sbc	r26, r26
     e56:	e0 e8       	ldi	r30, 0x80	; 128
     e58:	fe ef       	ldi	r31, 0xFE	; 254
     e5a:	16 16       	cp	r1, r22
     e5c:	17 06       	cpc	r1, r23
     e5e:	e8 07       	cpc	r30, r24
     e60:	f9 07       	cpc	r31, r25
     e62:	c0 f0       	brcs	.+48     	; 0xe94 <__fp_cmp+0x46>
     e64:	12 16       	cp	r1, r18
     e66:	13 06       	cpc	r1, r19
     e68:	e4 07       	cpc	r30, r20
     e6a:	f5 07       	cpc	r31, r21
     e6c:	98 f0       	brcs	.+38     	; 0xe94 <__fp_cmp+0x46>
     e6e:	62 1b       	sub	r22, r18
     e70:	73 0b       	sbc	r23, r19
     e72:	84 0b       	sbc	r24, r20
     e74:	95 0b       	sbc	r25, r21
     e76:	39 f4       	brne	.+14     	; 0xe86 <__fp_cmp+0x38>
     e78:	0a 26       	eor	r0, r26
     e7a:	61 f0       	breq	.+24     	; 0xe94 <__fp_cmp+0x46>
     e7c:	23 2b       	or	r18, r19
     e7e:	24 2b       	or	r18, r20
     e80:	25 2b       	or	r18, r21
     e82:	21 f4       	brne	.+8      	; 0xe8c <__fp_cmp+0x3e>
     e84:	08 95       	ret
     e86:	0a 26       	eor	r0, r26
     e88:	09 f4       	brne	.+2      	; 0xe8c <__fp_cmp+0x3e>
     e8a:	a1 40       	sbci	r26, 0x01	; 1
     e8c:	a6 95       	lsr	r26
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	81 1d       	adc	r24, r1
     e92:	81 1d       	adc	r24, r1
     e94:	08 95       	ret

00000e96 <__fp_split3>:
     e96:	57 fd       	sbrc	r21, 7
     e98:	90 58       	subi	r25, 0x80	; 128
     e9a:	44 0f       	add	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	59 f0       	breq	.+22     	; 0xeb6 <__fp_splitA+0x10>
     ea0:	5f 3f       	cpi	r21, 0xFF	; 255
     ea2:	71 f0       	breq	.+28     	; 0xec0 <__fp_splitA+0x1a>
     ea4:	47 95       	ror	r20

00000ea6 <__fp_splitA>:
     ea6:	88 0f       	add	r24, r24
     ea8:	97 fb       	bst	r25, 7
     eaa:	99 1f       	adc	r25, r25
     eac:	61 f0       	breq	.+24     	; 0xec6 <__fp_splitA+0x20>
     eae:	9f 3f       	cpi	r25, 0xFF	; 255
     eb0:	79 f0       	breq	.+30     	; 0xed0 <__fp_splitA+0x2a>
     eb2:	87 95       	ror	r24
     eb4:	08 95       	ret
     eb6:	12 16       	cp	r1, r18
     eb8:	13 06       	cpc	r1, r19
     eba:	14 06       	cpc	r1, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	f2 cf       	rjmp	.-28     	; 0xea4 <__fp_split3+0xe>
     ec0:	46 95       	lsr	r20
     ec2:	f1 df       	rcall	.-30     	; 0xea6 <__fp_splitA>
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <__fp_splitA+0x30>
     ec6:	16 16       	cp	r1, r22
     ec8:	17 06       	cpc	r1, r23
     eca:	18 06       	cpc	r1, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	f1 cf       	rjmp	.-30     	; 0xeb2 <__fp_splitA+0xc>
     ed0:	86 95       	lsr	r24
     ed2:	71 05       	cpc	r23, r1
     ed4:	61 05       	cpc	r22, r1
     ed6:	08 94       	sec
     ed8:	08 95       	ret

00000eda <__fp_zero>:
     eda:	e8 94       	clt

00000edc <__fp_szero>:
     edc:	bb 27       	eor	r27, r27
     ede:	66 27       	eor	r22, r22
     ee0:	77 27       	eor	r23, r23
     ee2:	cb 01       	movw	r24, r22
     ee4:	97 f9       	bld	r25, 7
     ee6:	08 95       	ret

00000ee8 <__gesf2>:
     ee8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fp_cmp>
     eec:	08 f4       	brcc	.+2      	; 0xef0 <__gesf2+0x8>
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	08 95       	ret

00000ef2 <__mulsf3>:
     ef2:	0e 94 8c 07 	call	0xf18	; 0xf18 <__mulsf3x>
     ef6:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_round>
     efa:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
     efe:	38 f0       	brcs	.+14     	; 0xf0e <__mulsf3+0x1c>
     f00:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
     f04:	20 f0       	brcs	.+8      	; 0xf0e <__mulsf3+0x1c>
     f06:	95 23       	and	r25, r21
     f08:	11 f0       	breq	.+4      	; 0xf0e <__mulsf3+0x1c>
     f0a:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
     f0e:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_nan>
     f12:	11 24       	eor	r1, r1
     f14:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_szero>

00000f18 <__mulsf3x>:
     f18:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_split3>
     f1c:	70 f3       	brcs	.-36     	; 0xefa <__mulsf3+0x8>

00000f1e <__mulsf3_pse>:
     f1e:	95 9f       	mul	r25, r21
     f20:	c1 f3       	breq	.-16     	; 0xf12 <__mulsf3+0x20>
     f22:	95 0f       	add	r25, r21
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	55 1f       	adc	r21, r21
     f28:	62 9f       	mul	r22, r18
     f2a:	f0 01       	movw	r30, r0
     f2c:	72 9f       	mul	r23, r18
     f2e:	bb 27       	eor	r27, r27
     f30:	f0 0d       	add	r31, r0
     f32:	b1 1d       	adc	r27, r1
     f34:	63 9f       	mul	r22, r19
     f36:	aa 27       	eor	r26, r26
     f38:	f0 0d       	add	r31, r0
     f3a:	b1 1d       	adc	r27, r1
     f3c:	aa 1f       	adc	r26, r26
     f3e:	64 9f       	mul	r22, r20
     f40:	66 27       	eor	r22, r22
     f42:	b0 0d       	add	r27, r0
     f44:	a1 1d       	adc	r26, r1
     f46:	66 1f       	adc	r22, r22
     f48:	82 9f       	mul	r24, r18
     f4a:	22 27       	eor	r18, r18
     f4c:	b0 0d       	add	r27, r0
     f4e:	a1 1d       	adc	r26, r1
     f50:	62 1f       	adc	r22, r18
     f52:	73 9f       	mul	r23, r19
     f54:	b0 0d       	add	r27, r0
     f56:	a1 1d       	adc	r26, r1
     f58:	62 1f       	adc	r22, r18
     f5a:	83 9f       	mul	r24, r19
     f5c:	a0 0d       	add	r26, r0
     f5e:	61 1d       	adc	r22, r1
     f60:	22 1f       	adc	r18, r18
     f62:	74 9f       	mul	r23, r20
     f64:	33 27       	eor	r19, r19
     f66:	a0 0d       	add	r26, r0
     f68:	61 1d       	adc	r22, r1
     f6a:	23 1f       	adc	r18, r19
     f6c:	84 9f       	mul	r24, r20
     f6e:	60 0d       	add	r22, r0
     f70:	21 1d       	adc	r18, r1
     f72:	82 2f       	mov	r24, r18
     f74:	76 2f       	mov	r23, r22
     f76:	6a 2f       	mov	r22, r26
     f78:	11 24       	eor	r1, r1
     f7a:	9f 57       	subi	r25, 0x7F	; 127
     f7c:	50 40       	sbci	r21, 0x00	; 0
     f7e:	9a f0       	brmi	.+38     	; 0xfa6 <__mulsf3_pse+0x88>
     f80:	f1 f0       	breq	.+60     	; 0xfbe <__mulsf3_pse+0xa0>
     f82:	88 23       	and	r24, r24
     f84:	4a f0       	brmi	.+18     	; 0xf98 <__mulsf3_pse+0x7a>
     f86:	ee 0f       	add	r30, r30
     f88:	ff 1f       	adc	r31, r31
     f8a:	bb 1f       	adc	r27, r27
     f8c:	66 1f       	adc	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	91 50       	subi	r25, 0x01	; 1
     f94:	50 40       	sbci	r21, 0x00	; 0
     f96:	a9 f7       	brne	.-22     	; 0xf82 <__mulsf3_pse+0x64>
     f98:	9e 3f       	cpi	r25, 0xFE	; 254
     f9a:	51 05       	cpc	r21, r1
     f9c:	80 f0       	brcs	.+32     	; 0xfbe <__mulsf3_pse+0xa0>
     f9e:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
     fa2:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_szero>
     fa6:	5f 3f       	cpi	r21, 0xFF	; 255
     fa8:	e4 f3       	brlt	.-8      	; 0xfa2 <__mulsf3_pse+0x84>
     faa:	98 3e       	cpi	r25, 0xE8	; 232
     fac:	d4 f3       	brlt	.-12     	; 0xfa2 <__mulsf3_pse+0x84>
     fae:	86 95       	lsr	r24
     fb0:	77 95       	ror	r23
     fb2:	67 95       	ror	r22
     fb4:	b7 95       	ror	r27
     fb6:	f7 95       	ror	r31
     fb8:	e7 95       	ror	r30
     fba:	9f 5f       	subi	r25, 0xFF	; 255
     fbc:	c1 f7       	brne	.-16     	; 0xfae <__mulsf3_pse+0x90>
     fbe:	fe 2b       	or	r31, r30
     fc0:	88 0f       	add	r24, r24
     fc2:	91 1d       	adc	r25, r1
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	97 f9       	bld	r25, 7
     fca:	08 95       	ret

00000fcc <__fp_inf>:
     fcc:	97 f9       	bld	r25, 7
     fce:	9f 67       	ori	r25, 0x7F	; 127
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	08 95       	ret

00000fd8 <__fp_nan>:
     fd8:	9f ef       	ldi	r25, 0xFF	; 255
     fda:	80 ec       	ldi	r24, 0xC0	; 192
     fdc:	08 95       	ret

00000fde <__fp_pscA>:
     fde:	00 24       	eor	r0, r0
     fe0:	0a 94       	dec	r0
     fe2:	16 16       	cp	r1, r22
     fe4:	17 06       	cpc	r1, r23
     fe6:	18 06       	cpc	r1, r24
     fe8:	09 06       	cpc	r0, r25
     fea:	08 95       	ret

00000fec <__fp_pscB>:
     fec:	00 24       	eor	r0, r0
     fee:	0a 94       	dec	r0
     ff0:	12 16       	cp	r1, r18
     ff2:	13 06       	cpc	r1, r19
     ff4:	14 06       	cpc	r1, r20
     ff6:	05 06       	cpc	r0, r21
     ff8:	08 95       	ret

00000ffa <__fp_round>:
     ffa:	09 2e       	mov	r0, r25
     ffc:	03 94       	inc	r0
     ffe:	00 0c       	add	r0, r0
    1000:	11 f4       	brne	.+4      	; 0x1006 <__fp_round+0xc>
    1002:	88 23       	and	r24, r24
    1004:	52 f0       	brmi	.+20     	; 0x101a <__fp_round+0x20>
    1006:	bb 0f       	add	r27, r27
    1008:	40 f4       	brcc	.+16     	; 0x101a <__fp_round+0x20>
    100a:	bf 2b       	or	r27, r31
    100c:	11 f4       	brne	.+4      	; 0x1012 <__fp_round+0x18>
    100e:	60 ff       	sbrs	r22, 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <__fp_round+0x20>
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	8f 4f       	sbci	r24, 0xFF	; 255
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	08 95       	ret

0000101c <__itoa_ncheck>:
    101c:	bb 27       	eor	r27, r27
    101e:	4a 30       	cpi	r20, 0x0A	; 10
    1020:	31 f4       	brne	.+12     	; 0x102e <__itoa_ncheck+0x12>
    1022:	99 23       	and	r25, r25
    1024:	22 f4       	brpl	.+8      	; 0x102e <__itoa_ncheck+0x12>
    1026:	bd e2       	ldi	r27, 0x2D	; 45
    1028:	90 95       	com	r25
    102a:	81 95       	neg	r24
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__utoa_common>

00001032 <__utoa_ncheck>:
    1032:	bb 27       	eor	r27, r27

00001034 <__utoa_common>:
    1034:	fb 01       	movw	r30, r22
    1036:	55 27       	eor	r21, r21
    1038:	aa 27       	eor	r26, r26
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	aa 1f       	adc	r26, r26
    1040:	a4 17       	cp	r26, r20
    1042:	10 f0       	brcs	.+4      	; 0x1048 <__utoa_common+0x14>
    1044:	a4 1b       	sub	r26, r20
    1046:	83 95       	inc	r24
    1048:	50 51       	subi	r21, 0x10	; 16
    104a:	b9 f7       	brne	.-18     	; 0x103a <__utoa_common+0x6>
    104c:	a0 5d       	subi	r26, 0xD0	; 208
    104e:	aa 33       	cpi	r26, 0x3A	; 58
    1050:	08 f0       	brcs	.+2      	; 0x1054 <__utoa_common+0x20>
    1052:	a9 5d       	subi	r26, 0xD9	; 217
    1054:	a1 93       	st	Z+, r26
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	79 f7       	brne	.-34     	; 0x1038 <__utoa_common+0x4>
    105a:	b1 11       	cpse	r27, r1
    105c:	b1 93       	st	Z+, r27
    105e:	11 92       	st	Z+, r1
    1060:	cb 01       	movw	r24, r22
    1062:	0c 94 33 08 	jmp	0x1066	; 0x1066 <strrev>

00001066 <strrev>:
    1066:	dc 01       	movw	r26, r24
    1068:	fc 01       	movw	r30, r24
    106a:	67 2f       	mov	r22, r23
    106c:	71 91       	ld	r23, Z+
    106e:	77 23       	and	r23, r23
    1070:	e1 f7       	brne	.-8      	; 0x106a <strrev+0x4>
    1072:	32 97       	sbiw	r30, 0x02	; 2
    1074:	04 c0       	rjmp	.+8      	; 0x107e <strrev+0x18>
    1076:	7c 91       	ld	r23, X
    1078:	6d 93       	st	X+, r22
    107a:	70 83       	st	Z, r23
    107c:	62 91       	ld	r22, -Z
    107e:	ae 17       	cp	r26, r30
    1080:	bf 07       	cpc	r27, r31
    1082:	c8 f3       	brcs	.-14     	; 0x1076 <strrev+0x10>
    1084:	08 95       	ret

00001086 <_exit>:
    1086:	f8 94       	cli

00001088 <__stop_program>:
    1088:	ff cf       	rjmp	.-2      	; 0x1088 <__stop_program>
